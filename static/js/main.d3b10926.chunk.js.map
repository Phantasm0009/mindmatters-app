{"version":3,"sources":["services/storageService.js","services/weatherService.js","services/colorService.js","components/ThemeManager.js","components/JournalEntry.js","components/JournalLog.js","components/MoodTracker.js","components/BreathingExercises.js","components/EmergencyContacts.js","services/smsService.js","components/SOSButton.js","services/quoteService.js","components/DailyQuote.js","components/WeatherMood.js","services/geoLocationService.js","data/crisisHotlines.js","services/wikiHotlineService.js","services/crisisHotlineService.js","components/CrisisHotlines.js","services/notificationService.js","components/Settings.js","components/Dashboard.js","App.js","index.js"],"names":["DB_NAME","dbPromise","dbInitialized","getDB","async","console","log","openDB","upgrade","db","oldVersion","newVersion","transaction","concat","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","createIndex","unique","Array","from","err","error","getMoodEntries","getAll","warn","DEFAULT_LAT","DEFAULT_LONG","fetchCurrentWeather","latitude","longitude","navigator","onLine","cachedWeather","localStorage","getItem","data","timestamp","JSON","parse","Date","now","_objectSpread","source","Error","url","response","fetch","signal","AbortSignal","timeout","ok","status","json","weatherCache","setItem","stringify","getWeatherIcon","code","isDay","arguments","length","undefined","getDefaultPalette","mood","defaultPalettes","happy","excited","calm","relaxed","neutral","sad","stressed","angry","anxious","tired","grateful","rgbToHex","rgb","map","x","hex","toString","join","rgbToRgba","alpha","getContrastColor","ThemeContext","createContext","useTheme","useContext","ThemeProvider","_ref","children","currentTheme","setCurrentTheme","useState","customTheme","setCustomTheme","showPicker","setShowPicker","isApplying","setIsApplying","currentMood","setCurrentMood","useEffect","isMounted","themeVars","appliedMood","lastMoodEntry","getLastMoodEntry","moodValue","getAndApplyMoodTheme","getMoodName","applyThemeVariables","applyTheme","savedTheme","savedMood","savedCustomTheme","parsedTheme","e","savedThemeVars","parsedVars","loadSavedTheme","entries","sort","a","b","date","palette","getMoodColorPalette","isArray","primary","secondary","accent","background","text","onPrimary","onSecondary","onAccent","onBackground","primaryLight","c","Math","min","round","primaryDark","secondaryLight","secondaryDark","accentLight","accentDark","primaryTransparent","backgroundDark","max","createThemeFromPalette","variables","root","document","documentElement","Object","forEach","_ref2","key","value","style","setProperty","changeTheme","theme","generateThemeFromMood","themeContextValue","_jsx","Provider","_jsxs","className","onClick","disabled","marginTop","textAlign","fontSize","opacity","JournalEntry","entry","setEntry","thoughts","activities","gratitude","weather","showSuccess","setShowSuccess","loadingWeather","setLoadingWeather","weatherError","setWeatherError","location","Promise","resolve","reject","geolocation","getCurrentPosition","position","coords","message","weatherData","current","prev","temperature","temperature_2m","weatherCode","weather_code","humidity","relative_humidity_2m","is_day","getWeatherData","handleInputChange","name","target","getMoodLabel","onSubmit","preventDefault","newEntry","toISOString","add","saveJournalEntry","setTimeout","type","onChange","newMoodValue","parseInt","moodTexts","htmlFor","id","placeholder","rows","activity","includes","updatedActivities","index","indexOf","splice","push","handleActivityToggle","JournalLog","setEntries","loading","setLoading","filter","setFilter","selectedEntry","setSelectedEntry","searchTerm","setSearchTerm","sortedData","fetchEntries","getFilteredEntries","filteredEntries","oneWeekAgo","setDate","getDate","oneMonthAgo","setMonth","getMonth","trim","term","toLowerCase","formatDate","dateString","toLocaleDateString","weekday","year","month","day","getMoodEmoji","getEntryStyle","borderColor","gradientColor","borderLeft","closeEntryDetails","handleEntryClick","substring","slice","i","stopPropagation","ChartJS","register","registerables","MoodTracker","moodData","setMoodData","timeRange","setTimeRange","showGrid","setShowGrid","chartDataState","setChartDataState","labels","datasets","label","backgroundColor","borderWidth","getMoodData","moods","generateSampleMoodData","fetchMoodData","updateChartData","today","sampleData","floor","random","split","filteredData","cutoff","setFullYear","getFullYear","filtered","formatDisplayDate","dateStr","fill","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHoverRadius","chartOptions","responsive","maintainAspectRatio","plugins","legend","display","tooltip","mode","intersect","titleColor","bodyColor","padding","displayColors","bodyFont","size","callbacks","title","context","raw","afterLabel","dataIndex","scales","y","ticks","stepSize","font","color","weight","grid","maxRotation","minRotation","interaction","axis","elements","line","stats","calculateMoodStatistics","avg","highest","lowest","moodValues","reduce","total","toFixed","checked","_Fragment","Line","options","BreathingExercises","activeExercise","setActiveExercise","isPlaying","setIsPlaying","counter","setCounter","phase","setPhase","cycles","setCycles","selectedCategory","setSelectedCategory","progress","setProgress","totalDuration","setTotalDuration","elapsedTime","setElapsedTime","timerRef","useRef","audioRef","phaseTimerRef","countdownIntervalRef","exercises","description","phases","duration","instruction","totalCycles","benefits","category","animationType","icon","categories","clearAllTimers","clearTimeout","clearInterval","pause","playSound","soundType","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","frequency","gain","setValueAtTime","currentTime","linearRampToValueAtTime","start","stop","runExercise","exercise","cycleIndex","phaseIndex","stopExercise","currentPhase","timeRemaining","setInterval","nextPhaseIndex","nextCycleIndex","filteredExercises","ex","progressPercentage","_","animationDelay","transform","p","width","String","padStart","_categories$find","find","benefit","idx","cycleDuration","totalTime","startExercise","EmergencyContacts","contacts","setContacts","setName","phone","setPhone","editIndex","setEditIndex","isAdding","setIsAdding","formError","setFormError","savedContacts","contact","testCall","phoneNumber","href","handleEdit","newContacts","removeContact","test","updatedContacts","handleCancel","sendSMS","isIOS","userAgent","encodedMessage","encodeURIComponent","smsLink","SOSButton","showConfirm","setShowConfirm","sending","setSending","sent","setSent","hasContacts","setHasContacts","history","useHistory","checkContacts","storedContacts","handleStorageChange","addEventListener","removeEventListener","handleSOSClick","handleConfirmSOS","toLocaleString","recipients","fallbackQuotes","quote","author","DailyQuote","setQuote","tags","authorBio","refreshing","setRefreshing","isOnline","setIsOnline","showCopied","setShowCopied","showAuthorInfo","setShowAuthorInfo","handleOnline","handleOffline","getQuote","forceRefresh","quoteData","toDateString","cachedData","cached","success","apis","parser","content","tag","bio","q","randomQuote","quoteText","quoteAuthor","api","randomIndex","fallbackQuote","fetchDailyQuote","storedQuote","storedDate","parsedQuote","toggleAuthorInfo","copyQuote","textToCopy","clipboard","writeText","then","catch","Chart","WeatherMood","currentWeather","setCurrentWeather","setError","analysis","setAnalysis","moodEntries","setMoodEntries","chartType","setChartType","getUserLocation","weatherAnalysis","analyzeWeatherMoodPatterns","hasEnoughData","weatherMoodGroups","sunny","avgMood","cloudy","rainy","snowy","keys","weatherType","group","sum","acc","parseFloat","count","insights","bestWeather","highestMood","worstWeather","lowestMood","difference","fetchData","defaultLocation","getChartData","weatherTypes","getWeatherColors","charAt","toUpperCase","borderRadius","hoverBackgroundColor","getChartOptions","baseOptions","parsed","beginAtZero","animation","easing","r","backdropColor","angleLines","pointLabels","formatTemperature","temp","reload","apparent_temperature","getWeatherTimeAgo","diff","minutes","hours","days","Bar","insight","cachedLocationData","cacheTimestamp","crisisHotlines","country","countryCode","hotlines","altPhone","website","CACHE_KEY","getCombinedHotlines","staticHotlines","wikiSuccess","getHotlinesCacheStatus","getWikiHotlinesCacheInfo","age","exists","ageInDays","getHotlinesForCountry","normalizedCode","getAvailableCountries","CrisisHotlines","userCountry","setUserCountry","countryHotlines","setCountryHotlines","availableCountries","setAvailableCountries","allHotlines","setAllHotlines","selectedCountry","setSelectedCountry","dataSource","setDataSource","cacheInfo","setCacheInfo","isRefreshing","setIsRefreshing","storedLocation","country_name","country_code","city","region","getUserCountry","cacheStatus","countries","initialCountry","countryData","callHotline","startsWith","replace","hotline","rel","SETTINGS_STORE","canUseNotifications","Notification","permission","requestPermission","scheduleDailyReminder","hour","minute","saveNotificationSettings","enabled","reminderTime","serviceWorker","controller","postMessage","body","getTime","delay","badge","put","settings","getNotificationSettings","get","Settings","activeSection","setActiveSection","notificationPermission","setNotificationPermission","reminderEnabled","setReminderEnabled","setReminderTime","isInstalledPWA","setIsInstalledPWA","appVersion","setAppVersion","offlineStatus","setOfflineStatus","testNotificationSent","setTestNotificationSent","storageUsage","setStorageUsage","reminderActive","isReminderActive","time","getReminderTime","checkNotificationState","checkPWAStatus","isStandalone","matchMedia","matches","standalone","referrer","storage","estimate","usedMB","usage","quotaMB","quota","percentUsed","used","percent","calculateStorageUsage","requestNotificationPermission","sendTestNotification","cancelDailyReminder","Number","newTime","handleInstallClick","deferredPrompt","prompt","userChoice","choiceResult","outcome","confirm","indexedDB","databases","deleteDatabase","clear","caches","all","delete","src","alt","Dashboard","defaultTab","activeTab","setActiveTab","mobileNavOpen","setMobileNavOpen","useLocation","path","pathname","toggleMobileNav","Link","to","items","item","App","Router","Switch","Route","exact","Redirect","isGitHubPages","hostname","swUrl","registration","scope","classList","remove","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d3b10926.chunk.js","sourcesContent":["import { openDB } from 'idb';\r\n\r\nconst DB_NAME = 'MindMattersDB';\r\n// Increase the version number to trigger a proper upgrade\r\nconst DB_VERSION = 2;\r\nlet dbPromise = null;\r\nlet dbInitialized = false;\r\n\r\n// Initialize database with proper initialization check\r\nconst getDB = async () => {\r\n  if (!dbPromise) {\r\n    try {\r\n      console.log('Initializing database...');\r\n      dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n        upgrade(db, oldVersion, newVersion, transaction) {\r\n          console.log(`Upgrading database from v${oldVersion} to v${newVersion}`);\r\n          \r\n          // Create all necessary object stores if they don't exist\r\n          if (!db.objectStoreNames.contains('moodEntries')) {\r\n            console.log('Creating moodEntries store');\r\n            const store = db.createObjectStore('moodEntries', { \r\n              keyPath: 'id', \r\n              autoIncrement: true \r\n            });\r\n            store.createIndex('date', 'date', { unique: false });\r\n          }\r\n          \r\n          if (!db.objectStoreNames.contains('settings')) {\r\n            console.log('Creating settings store');\r\n            db.createObjectStore('settings', { keyPath: 'id' });\r\n          }\r\n          \r\n          if (!db.objectStoreNames.contains('themes')) {\r\n            console.log('Creating themes store');\r\n            db.createObjectStore('themes', { keyPath: 'id' });\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Wait for the database to open successfully\r\n      const db = await dbPromise;\r\n      dbInitialized = true;\r\n      console.log('Database initialized successfully with stores:', Array.from(db.objectStoreNames));\r\n      return db;\r\n    } catch (err) {\r\n      console.error('Database initialization failed:', err);\r\n      dbPromise = null;\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Wait for the promise to resolve\r\n  try {\r\n    return await dbPromise;\r\n  } catch (err) {\r\n    console.error('Error accessing database:', err);\r\n    dbPromise = null;\r\n    return null;\r\n  }\r\n};\r\n\r\n// Enhanced getMoodEntries with better error handling\r\nexport const getMoodEntries = async () => {\r\n  try {\r\n    const db = await getDB();\r\n    if (!db) {\r\n      console.warn('Database not available, returning empty entries list');\r\n      return [];\r\n    }\r\n    \r\n    // Verify the object store exists before attempting transaction\r\n    if (!db.objectStoreNames.contains('moodEntries')) {\r\n      console.error('moodEntries store not found in database');\r\n      return [];\r\n    }\r\n    \r\n    return await db.getAll('moodEntries');\r\n  } catch (error) {\r\n    console.error('Error getting mood entries:', error);\r\n    return []; // Return empty array as fallback\r\n  }\r\n};\r\n\r\n// Apply the same pattern to other database methods\r\nexport const saveJournalEntry = async (entry) => {\r\n  try {\r\n    const db = await getDB();\r\n    if (!db) {\r\n      console.error('Cannot save entry: Database not available');\r\n      return false;\r\n    }\r\n    \r\n    // Verify the object store exists\r\n    if (!db.objectStoreNames.contains('moodEntries')) {\r\n      console.error('Cannot save entry: moodEntries store not found');\r\n      return false;\r\n    }\r\n    \r\n    await db.add('moodEntries', entry);\r\n    console.log('Journal entry saved successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving journal entry:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Add a mood entry\r\nexport const addMoodEntry = async (entry) => {\r\n  try {\r\n    const db = await getDB();\r\n    if (!db) {\r\n      console.error('Cannot add entry: Database not available');\r\n      return false;\r\n    }\r\n\r\n    // Verify the object store exists\r\n    if (!db.objectStoreNames.contains('moodEntries')) {\r\n      console.error('Cannot add entry: moodEntries store not found');\r\n      return false;\r\n    }\r\n\r\n    await db.add('moodEntries', entry);\r\n    console.log('Mood entry added successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error adding mood entry:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get mood data function explicitly exported\r\nexport const getMoodData = async () => {\r\n  try {\r\n    return await getMoodEntries();\r\n  } catch (error) {\r\n    console.error(\"Error fetching mood data:\", error);\r\n    return []; // Return empty array on error\r\n  }\r\n};\r\n\r\n// Clear all mood entries\r\nexport const clearMoodEntries = async () => {\r\n  try {\r\n    const db = await getDB();\r\n    if (!db) {\r\n      console.error('Cannot clear entries: Database not available');\r\n      return false;\r\n    }\r\n\r\n    // Verify the object store exists\r\n    if (!db.objectStoreNames.contains('moodEntries')) {\r\n      console.error('Cannot clear entries: moodEntries store not found');\r\n      return false;\r\n    }\r\n\r\n    await db.clear('moodEntries');\r\n    console.log('All mood entries cleared successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing mood entries:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get mood entries by date\r\nexport const getMoodEntriesByDate = async (date) => {\r\n  try {\r\n    const entries = await getMoodEntries();\r\n    return entries.filter(entry => entry.date === date);\r\n  } catch (error) {\r\n    console.error('Error getting mood entries by date:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Add to storageService.js\r\nexport const resetDatabase = async () => {\r\n  try {\r\n    await deleteDB(DB_NAME);\r\n    dbPromise = null;\r\n    dbInitialized = false;\r\n    console.log('Database reset successfully');\r\n    return true;\r\n  } catch (err) {\r\n    console.error('Error resetting database:', err);\r\n    return false;\r\n  }\r\n};","/**\r\n * Weather service to interact with Open-Meteo API\r\n */\r\n\r\n// Default coordinates if geolocation is not available\r\nconst DEFAULT_LAT = 40.7128;  // New York\r\nconst DEFAULT_LONG = -74.0060;\r\n\r\n/**\r\n * Get the user's current location\r\n * @returns {Promise} Promise resolving to {latitude, longitude}\r\n */\r\nexport const getUserLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      console.log('Geolocation not supported, using default location');\r\n      resolve({ latitude: DEFAULT_LAT, longitude: DEFAULT_LONG });\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        resolve({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error getting location:', error.message);\r\n        resolve({ latitude: DEFAULT_LAT, longitude: DEFAULT_LONG });\r\n      },\r\n      { timeout: 10000 }\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch current weather data from Open-Meteo API\r\n * @param {number} latitude - Location latitude\r\n * @param {number} longitude - Location longitude\r\n * @returns {Promise} Weather data\r\n */\r\nexport const fetchCurrentWeather = async (latitude, longitude) => {\r\n  try {\r\n    // If offline, return cached weather if available\r\n    if (!navigator.onLine) {\r\n      const cachedWeather = localStorage.getItem('cachedWeather');\r\n      if (cachedWeather) {\r\n        const { data, timestamp } = JSON.parse(cachedWeather);\r\n        // Return cached data if less than 3 hours old\r\n        if (Date.now() - timestamp < 3 * 60 * 60 * 1000) {\r\n          return { ...data, source: 'cache' };\r\n        }\r\n      }\r\n      throw new Error('Offline and no recent cached weather');\r\n    }\r\n\r\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,weather_code,cloud_cover,pressure_msl,wind_speed_10m,wind_direction_10m,wind_gusts_10m&hourly=temperature_2m,precipitation_probability,weather_code&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset&timezone=auto&forecast_days=1`;\r\n\r\n    const response = await fetch(url, { \r\n      signal: AbortSignal.timeout(5000) // 5 second timeout\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Weather API error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Cache the weather data\r\n    const weatherCache = {\r\n      data,\r\n      timestamp: Date.now()\r\n    };\r\n    localStorage.setItem('cachedWeather', JSON.stringify(weatherCache));\r\n    \r\n    return { ...data, source: 'api' };\r\n  } catch (error) {\r\n    console.error('Failed to fetch weather:', error);\r\n    \r\n    // Return cached data if available, regardless of age\r\n    const cachedWeather = localStorage.getItem('cachedWeather');\r\n    if (cachedWeather) {\r\n      const { data } = JSON.parse(cachedWeather);\r\n      return { ...data, source: 'old-cache' };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get weather description from weather code\r\n * @param {number} code - WMO weather code\r\n * @returns {string} Weather description\r\n */\r\nexport const getWeatherDescription = (code) => {\r\n  const weatherCodes = {\r\n    0: 'Clear sky',\r\n    1: 'Mainly clear',\r\n    2: 'Partly cloudy',\r\n    3: 'Overcast',\r\n    45: 'Fog',\r\n    48: 'Depositing rime fog',\r\n    51: 'Light drizzle',\r\n    53: 'Moderate drizzle',\r\n    55: 'Dense drizzle',\r\n    56: 'Light freezing drizzle',\r\n    57: 'Dense freezing drizzle',\r\n    61: 'Slight rain',\r\n    63: 'Moderate rain',\r\n    65: 'Heavy rain',\r\n    66: 'Light freezing rain',\r\n    67: 'Heavy freezing rain',\r\n    71: 'Slight snow fall',\r\n    73: 'Moderate snow fall',\r\n    75: 'Heavy snow fall',\r\n    77: 'Snow grains',\r\n    80: 'Slight rain showers',\r\n    81: 'Moderate rain showers',\r\n    82: 'Violent rain showers',\r\n    85: 'Slight snow showers',\r\n    86: 'Heavy snow showers',\r\n    95: 'Thunderstorm',\r\n    96: 'Thunderstorm with slight hail',\r\n    99: 'Thunderstorm with heavy hail'\r\n  };\r\n  \r\n  return weatherCodes[code] || 'Unknown';\r\n};\r\n\r\n/**\r\n * Get weather icon based on weather code and day/night\r\n * @param {number} code - WMO weather code\r\n * @param {boolean} isDay - Whether it's daytime\r\n * @returns {string} Weather icon (emoji)\r\n */\r\nexport const getWeatherIcon = (code, isDay = true) => {\r\n  // Map weather codes to emojis\r\n  if (code === 0) return isDay ? '☀️' : '🌙'; // Clear\r\n  if (code === 1) return isDay ? '🌤️' : '🌙'; // Mainly clear\r\n  if (code === 2) return isDay ? '⛅' : '☁️'; // Partly cloudy\r\n  if (code === 3) return '☁️'; // Overcast\r\n  if (code >= 45 && code <= 48) return '🌫️'; // Fog\r\n  if (code >= 51 && code <= 57) return '🌦️'; // Drizzle\r\n  if (code >= 61 && code <= 67) return '🌧️'; // Rain\r\n  if (code >= 71 && code <= 77) return '❄️'; // Snow\r\n  if (code >= 80 && code <= 82) return '🌧️'; // Rain showers\r\n  if (code >= 85 && code <= 86) return '🌨️'; // Snow showers\r\n  if (code >= 95) return '⛈️'; // Thunderstorm\r\n  \r\n  return isDay ? '☀️' : '🌙'; // Default\r\n};\r\n\r\n/**\r\n * Analyze historical weather and mood data to find patterns\r\n * @param {Array} moodEntries - User's mood entries\r\n * @param {Array} weatherData - Historical weather data\r\n * @returns {Object} Analysis of weather-mood relationships\r\n */\r\nexport const analyzeWeatherMoodPatterns = (moodEntries, weatherData) => {\r\n  // If we don't have enough data, return null\r\n  if (!moodEntries || moodEntries.length < 3) {\r\n    return {\r\n      hasEnoughData: false,\r\n      message: \"We need more mood entries to analyze weather patterns. Keep logging your moods!\"\r\n    };\r\n  }\r\n\r\n  // Group mood entries by weather conditions\r\n  const weatherMoodGroups = {\r\n    sunny: { entries: [], avgMood: 0 },\r\n    cloudy: { entries: [], avgMood: 0 },\r\n    rainy: { entries: [], avgMood: 0 },\r\n    snowy: { entries: [], avgMood: 0 }\r\n  };\r\n  \r\n  // Process entries to group by weather\r\n  moodEntries.forEach(entry => {\r\n    if (!entry.weather) return;\r\n    \r\n    const weatherCode = entry.weather.weatherCode;\r\n    \r\n    if (weatherCode === 0 || weatherCode === 1) {\r\n      weatherMoodGroups.sunny.entries.push(entry);\r\n    } else if (weatherCode === 2 || weatherCode === 3) {\r\n      weatherMoodGroups.cloudy.entries.push(entry);\r\n    } else if ((weatherCode >= 51 && weatherCode <= 67) || \r\n              (weatherCode >= 80 && weatherCode <= 82)) {\r\n      weatherMoodGroups.rainy.entries.push(entry);\r\n    } else if ((weatherCode >= 71 && weatherCode <= 77) || \r\n              (weatherCode >= 85 && weatherCode <= 86)) {\r\n      weatherMoodGroups.snowy.entries.push(entry);\r\n    }\r\n  });\r\n  \r\n  // Calculate averages for each weather type\r\n  Object.keys(weatherMoodGroups).forEach(weatherType => {\r\n    const group = weatherMoodGroups[weatherType];\r\n    if (group.entries.length > 0) {\r\n      const sum = group.entries.reduce((acc, entry) => acc + entry.moodValue, 0);\r\n      group.avgMood = parseFloat((sum / group.entries.length).toFixed(1));\r\n      group.count = group.entries.length;\r\n    }\r\n  });\r\n\r\n  // Generate insights\r\n  const insights = [];\r\n  \r\n  // Find best weather for mood\r\n  let bestWeather = null;\r\n  let highestMood = 0;\r\n  \r\n  // Find worst weather for mood\r\n  let worstWeather = null;\r\n  let lowestMood = 11;\r\n  \r\n  Object.keys(weatherMoodGroups).forEach(weatherType => {\r\n    const group = weatherMoodGroups[weatherType];\r\n    if (group.entries.length >= 2) { // Only if we have enough data\r\n      if (group.avgMood > highestMood) {\r\n        highestMood = group.avgMood;\r\n        bestWeather = weatherType;\r\n      }\r\n      \r\n      if (group.avgMood < lowestMood) {\r\n        lowestMood = group.avgMood;\r\n        worstWeather = weatherType;\r\n      }\r\n    }\r\n  });\r\n  \r\n  if (bestWeather) {\r\n    insights.push({\r\n      type: 'positive',\r\n      text: `You tend to feel better on ${bestWeather} days (average mood: ${highestMood}/10).`\r\n    });\r\n  }\r\n  \r\n  if (worstWeather && worstWeather !== bestWeather) {\r\n    insights.push({\r\n      type: 'negative',\r\n      text: `You tend to feel lower on ${worstWeather} days (average mood: ${lowestMood}/10).`\r\n    });\r\n  }\r\n  \r\n  // Check for substantial differences\r\n  if (bestWeather && worstWeather && bestWeather !== worstWeather) {\r\n    const difference = highestMood - lowestMood;\r\n    if (difference >= 2) {\r\n      insights.push({\r\n        type: 'significant',\r\n        text: `Weather seems to have a significant impact on your mood (${difference.toFixed(1)} points difference).`\r\n      });\r\n    }\r\n  }\r\n  \r\n  return {\r\n    hasEnoughData: true,\r\n    weatherMoodGroups,\r\n    insights,\r\n    bestWeather,\r\n    worstWeather\r\n  };\r\n};","/**\r\n * Service to fetch color palettes from Colormind.io based on mood\r\n */\r\n\r\nconst COLORMIND_API = 'http://colormind.io/api/';\r\n\r\n/**\r\n * Get a color palette based on mood\r\n * @param {string} mood - The mood description (happy, sad, calm, etc)\r\n * @returns {Promise<Array>} Array of RGB colors\r\n */\r\nexport const getMoodColorPalette = async (mood) => {\r\n  // Skip API calls entirely and use default palettes\r\n  return getDefaultPalette(mood);\r\n};\r\n\r\n/**\r\n * Get a fallback color palette based on mood\r\n * @param {string} mood - The mood description\r\n * @returns {Array} Array of RGB colors\r\n */\r\nconst getDefaultPalette = (mood) => {\r\n  // Enhanced color palettes with harmonious combinations for each emotion\r\n  // Each palette is carefully designed for both aesthetic appeal and emotional resonance\r\n  const defaultPalettes = {\r\n    happy: [\r\n      [255, 195, 0],   // Primary: Bright yellow\r\n      [255, 153, 51],  // Secondary: Warm orange\r\n      [255, 87, 51],   // Accent: Coral\r\n      [255, 253, 230], // Background: Cream\r\n      [35, 35, 35]     // Text: Dark gray\r\n    ],\r\n    excited: [\r\n      [255, 89, 94],   // Primary: Coral red\r\n      [255, 130, 67],  // Secondary: Bright orange\r\n      [255, 45, 85],   // Accent: Hot pink\r\n      [255, 245, 245], // Background: Light cream\r\n      [40, 40, 40]     // Text: Near black\r\n    ],\r\n    calm: [\r\n      [86, 161, 200],  // Primary: Sky blue\r\n      [121, 189, 154], // Secondary: Seafoam\r\n      [71, 150, 237],  // Accent: Bright blue\r\n      [240, 248, 255], // Background: Alice blue\r\n      [45, 55, 72]     // Text: Blue-gray\r\n    ],\r\n    relaxed: [\r\n      [106, 177, 135], // Primary: Soft green\r\n      [132, 197, 175], // Secondary: Mint\r\n      [65, 176, 131],  // Accent: Emerald\r\n      [242, 250, 242], // Background: Off-white\r\n      [50, 72, 62]     // Text: Deep green-gray\r\n    ],\r\n    neutral: [\r\n      [190, 190, 190], // Primary: Medium gray\r\n      [160, 160, 170], // Secondary: Blue-gray\r\n      [130, 150, 170], // Accent: Slate\r\n      [246, 246, 246], // Background: Off-white\r\n      [60, 60, 60]     // Text: Dark gray\r\n    ],\r\n    sad: [\r\n      [108, 117, 187], // Primary: Muted blue\r\n      [143, 158, 191], // Secondary: Periwinkle\r\n      [95, 110, 175],  // Accent: Deeper blue\r\n      [240, 245, 250], // Background: Pale blue\r\n      [45, 50, 80]     // Text: Navy blue\r\n    ],\r\n    stressed: [\r\n      [242, 103, 34],  // Primary: Burnt orange\r\n      [236, 139, 94],  // Secondary: Soft orange\r\n      [255, 76, 5],    // Accent: Bright orange\r\n      [252, 247, 240], // Background: Cream\r\n      [60, 36, 21]     // Text: Dark brown\r\n    ],\r\n    angry: [\r\n      [201, 42, 42],   // Primary: Deep red\r\n      [220, 73, 58],   // Secondary: Brick red\r\n      [230, 46, 0],    // Accent: Fiery orange-red\r\n      [253, 241, 240], // Background: Light pink\r\n      [70, 28, 28]     // Text: Dark maroon\r\n    ],\r\n    anxious: [\r\n      [255, 177, 0],   // Primary: Amber\r\n      [255, 201, 71],  // Secondary: Muted gold\r\n      [255, 145, 0],   // Accent: Orange\r\n      [254, 250, 235], // Background: Light cream\r\n      [66, 54, 30]     // Text: Dark brown\r\n    ],\r\n    tired: [\r\n      [147, 112, 170], // Primary: Lavender\r\n      [170, 142, 190], // Secondary: Light purple\r\n      [120, 90, 140],  // Accent: Deep purple\r\n      [246, 243, 248], // Background: Pale lavender\r\n      [60, 45, 70]     // Text: Dark purple\r\n    ],\r\n    grateful: [\r\n      [41, 166, 126],  // Primary: Emerald\r\n      [92, 190, 143],  // Secondary: Light green\r\n      [39, 143, 108],  // Accent: Deep green\r\n      [240, 250, 244], // Background: Pale mint\r\n      [40, 70, 55]     // Text: Forest green\r\n    ]\r\n  };\r\n  \r\n  // Return default palette based on mood, or neutral if mood not found\r\n  return defaultPalettes[mood] || defaultPalettes.neutral;\r\n};\r\n\r\n/**\r\n * Convert RGB array to CSS hex color\r\n * @param {Array} rgb - [r, g, b] array\r\n * @returns {string} Hex color string (#RRGGBB)\r\n */\r\nexport const rgbToHex = (rgb) => {\r\n  return '#' + rgb.map(x => {\r\n    const hex = x.toString(16);\r\n    return hex.length === 1 ? '0' + hex : hex;\r\n  }).join('');\r\n};\r\n\r\n/**\r\n * Convert RGB array to CSS rgba string\r\n * @param {Array} rgb - [r, g, b] array\r\n * @param {number} alpha - Alpha transparency (0-1)\r\n * @returns {string} RGBA color string\r\n */\r\nexport const rgbToRgba = (rgb, alpha = 1) => {\r\n  return `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, ${alpha})`;\r\n};\r\n\r\n/**\r\n * Extract text color (white/black) that contrasts with background\r\n * @param {Array} rgb - Background color as [r, g, b] array\r\n * @returns {string} '#ffffff' for dark backgrounds or '#333333' for light backgrounds\r\n */\r\nexport const getContrastColor = (rgb) => {\r\n  // Calculate perceived brightness using weighted RGB (YIQ formula)\r\n  // This formula accounts for human perception of color brightness\r\n  const brightness = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\r\n  return brightness > 128 ? '#333333' : '#ffffff';\r\n};\r\n\r\n/**\r\n * Creates a full theme object from a color palette\r\n * @param {Array} palette - Array of RGB colors from Colormind\r\n * @returns {Object} Theme object with CSS variables\r\n */\r\nexport const createThemeFromPalette = (palette) => {\r\n  if (!palette || !Array.isArray(palette) || palette.length < 5) {\r\n    console.error('Invalid palette provided to createThemeFromPalette', palette);\r\n    return null;\r\n  }\r\n  \r\n  // Extract colors from palette\r\n  const [primary, secondary, accent, background, text] = palette;\r\n  \r\n  // Determine contrasting text colors\r\n  const onPrimary = getContrastColor(primary);\r\n  const onSecondary = getContrastColor(secondary);\r\n  const onAccent = getContrastColor(accent);\r\n  const onBackground = getContrastColor(background);\r\n  \r\n  // Create lighter and darker variants of primary color\r\n  const primaryLight = primary.map(c => Math.min(255, Math.round(c * 1.2)));\r\n  const primaryDark = primary.map(c => Math.round(c * 0.8));\r\n  \r\n  // Create lighter and darker variants of secondary color for more versatility\r\n  const secondaryLight = secondary.map(c => Math.min(255, Math.round(c * 1.15)));\r\n  const secondaryDark = secondary.map(c => Math.round(c * 0.85));\r\n  \r\n  // Create accent variations\r\n  const accentLight = accent.map(c => Math.min(255, Math.round(c * 1.1)));\r\n  const accentDark = accent.map(c => Math.round(c * 0.9));\r\n  \r\n  // Create a semi-transparent version of the primary color for overlays\r\n  const primaryTransparent = rgbToRgba(primary, 0.15);\r\n  \r\n  // Create a darker background for cards and panels\r\n  const backgroundDark = background.map(c => Math.max(0, Math.round(c * 0.97)));\r\n  \r\n  return {\r\n    '--primary-color': rgbToHex(primary),\r\n    '--primary-color-light': rgbToHex(primaryLight),\r\n    '--primary-color-dark': rgbToHex(primaryDark),\r\n    '--primary-transparent': primaryTransparent,\r\n    \r\n    '--secondary-color': rgbToHex(secondary),\r\n    '--secondary-color-light': rgbToHex(secondaryLight),\r\n    '--secondary-color-dark': rgbToHex(secondaryDark),\r\n    \r\n    '--accent-color': rgbToHex(accent),\r\n    '--accent-color-light': rgbToHex(accentLight),\r\n    '--accent-color-dark': rgbToHex(accentDark),\r\n    \r\n    '--background-light': rgbToHex(background),\r\n    '--background-dark': rgbToHex(backgroundDark),\r\n    '--background-white': '#ffffff',\r\n    \r\n    '--text-primary': rgbToHex(text),\r\n    '--text-secondary': onBackground === '#ffffff' ? '#dddddd' : '#666666',\r\n    '--text-light': rgbToRgba(text, 0.7),\r\n    \r\n    '--text-on-primary': onPrimary,\r\n    '--text-on-secondary': onSecondary,\r\n    '--text-on-accent': onAccent,\r\n    \r\n    '--shadow-color': rgbToRgba(text, 0.1),\r\n    '--card-border-color': rgbToRgba(primary, 0.3)\r\n  };\r\n};\r\n\r\n/**\r\n * Generate complementary colors for decorative elements\r\n * @param {Array} rgb - Base RGB color\r\n * @returns {string} Hex color string\r\n */\r\nexport const getComplementaryColor = (rgb) => {\r\n  // Create a complementary color by inverting the RGB values\r\n  return rgbToHex([\r\n    255 - rgb[0],\r\n    255 - rgb[1],\r\n    255 - rgb[2]\r\n  ]);\r\n};","import React, { useState, useEffect, createContext, useContext } from 'react';\r\nimport { getMoodColorPalette, createThemeFromPalette, rgbToHex } from '../services/colorService';\r\nimport { getMoodEntries } from '../services/storageService';\r\nimport './ThemeManager.css';\r\n\r\n// Create theme context\r\nconst ThemeContext = createContext();\r\n\r\n// Hook for components to access theme\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [currentTheme, setCurrentTheme] = useState('auto');\r\n  const [customTheme, setCustomTheme] = useState(null);\r\n  const [showPicker, setShowPicker] = useState(false);\r\n  const [isApplying, setIsApplying] = useState(false);\r\n  const [currentMood, setCurrentMood] = useState(null);\r\n  \r\n  // Apply theme when it changes\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    \r\n    const applyTheme = async () => {\r\n      setIsApplying(true);\r\n      try {\r\n        let themeVars;\r\n        let appliedMood = null;\r\n        \r\n        // Check what type of theme we're using\r\n        if (currentTheme === 'auto') {\r\n          // Get the last recorded mood\r\n          const lastMoodEntry = await getLastMoodEntry();\r\n          if (lastMoodEntry && lastMoodEntry.moodValue) {\r\n            themeVars = await getAndApplyMoodTheme(lastMoodEntry.moodValue);\r\n            appliedMood = getMoodName(lastMoodEntry.moodValue);\r\n          } else {\r\n            // Use default if no mood entry\r\n            themeVars = await getAndApplyMoodTheme('neutral');\r\n            appliedMood = 'neutral';\r\n          }\r\n        } else if (currentTheme === 'custom' && customTheme) {\r\n          // Apply custom theme\r\n          applyThemeVariables(customTheme);\r\n          themeVars = customTheme;\r\n        } else {\r\n          // Apply preset theme\r\n          themeVars = await getAndApplyMoodTheme(currentTheme);\r\n          appliedMood = currentTheme;\r\n        }\r\n        \r\n        setCurrentMood(appliedMood);\r\n        \r\n        // Save the theme preference and current mood to localStorage\r\n        localStorage.setItem('themePreference', currentTheme);\r\n        localStorage.setItem('currentMood', appliedMood || '');\r\n        \r\n        if (customTheme) {\r\n          localStorage.setItem('customTheme', JSON.stringify(customTheme));\r\n        }\r\n        \r\n        // Save applied theme variables to ensure they persist on refresh\r\n        localStorage.setItem('appliedThemeVars', JSON.stringify(themeVars));\r\n      } catch (error) {\r\n        console.error(\"Failed to apply theme:\", error);\r\n      } finally {\r\n        if (isMounted) {\r\n          setIsApplying(false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    applyTheme();\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [currentTheme, customTheme]);\r\n  \r\n  // Load saved theme preference and applied theme on first render\r\n  useEffect(() => {\r\n    const loadSavedTheme = async () => {\r\n      try {\r\n        // Get saved theme preference\r\n        const savedTheme = localStorage.getItem('themePreference') || 'auto';\r\n        setCurrentTheme(savedTheme);\r\n        \r\n        // Get saved mood\r\n        const savedMood = localStorage.getItem('currentMood');\r\n        if (savedMood) {\r\n          setCurrentMood(savedMood);\r\n        }\r\n        \r\n        // Get saved custom theme\r\n        const savedCustomTheme = localStorage.getItem('customTheme');\r\n        if (savedCustomTheme) {\r\n          try {\r\n            const parsedTheme = JSON.parse(savedCustomTheme);\r\n            setCustomTheme(parsedTheme);\r\n          } catch (e) {\r\n            console.error(\"Couldn't parse saved custom theme\", e);\r\n          }\r\n        }\r\n        \r\n        // Apply saved theme variables immediately for fast loading\r\n        const savedThemeVars = localStorage.getItem('appliedThemeVars');\r\n        if (savedThemeVars) {\r\n          try {\r\n            const parsedVars = JSON.parse(savedThemeVars);\r\n            applyThemeVariables(parsedVars);\r\n          } catch (e) {\r\n            console.error(\"Couldn't apply saved theme variables\", e);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading saved theme:\", error);\r\n      }\r\n    };\r\n    \r\n    loadSavedTheme();\r\n  }, []);\r\n  \r\n  // Get last mood entry from storage\r\n  const getLastMoodEntry = async () => {\r\n    try {\r\n      const entries = await getMoodEntries();\r\n      if (!entries || entries.length === 0) return null;\r\n      \r\n      // Sort entries by date (newest first)\r\n      entries.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n      return entries[0];\r\n    } catch (error) {\r\n      console.error('Error getting last mood entry:', error);\r\n      return null; // Return null as fallback\r\n    }\r\n  };\r\n  \r\n  const getMoodName = (moodValue) => {\r\n    if (moodValue <= 2) return 'sad';\r\n    if (moodValue === 3) return 'anxious';\r\n    if (moodValue === 4) return 'stressed';\r\n    if (moodValue === 5) return 'neutral';\r\n    if (moodValue === 6) return 'tired';\r\n    if (moodValue === 7) return 'calm';\r\n    if (moodValue === 8) return 'relaxed';\r\n    if (moodValue === 9) return 'happy';\r\n    return 'excited';\r\n  };\r\n  \r\n  // Apply theme based on mood\r\n  const getAndApplyMoodTheme = async (mood) => {\r\n    try {\r\n      const palette = await getMoodColorPalette(mood);\r\n      const themeVars = createThemeFromPalette(palette);\r\n      applyThemeVariables(themeVars);\r\n      return themeVars;\r\n    } catch (error) {\r\n      console.error(\"Error applying mood theme:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Apply CSS variables to root\r\n  const applyThemeVariables = (variables) => {\r\n    const root = document.documentElement;\r\n    Object.entries(variables).forEach(([key, value]) => {\r\n      root.style.setProperty(key, value);\r\n    });\r\n  };\r\n  \r\n  // Handle theme change\r\n  const changeTheme = (theme) => {\r\n    setCurrentTheme(theme);\r\n    setShowPicker(false);\r\n  };\r\n  \r\n  // Generate theme from specific mood\r\n  const generateThemeFromMood = async (mood) => {\r\n    setIsApplying(true);\r\n    try {\r\n      const themeVars = await getAndApplyMoodTheme(mood);\r\n      \r\n      // When generating a theme from mood, set it as custom theme\r\n      setCustomTheme(themeVars);\r\n      setCurrentTheme('custom');\r\n      setCurrentMood(mood);\r\n      \r\n      // Save the generated theme\r\n      localStorage.setItem('customTheme', JSON.stringify(themeVars));\r\n      localStorage.setItem('themePreference', 'custom');\r\n      localStorage.setItem('currentMood', mood);\r\n      localStorage.setItem('appliedThemeVars', JSON.stringify(themeVars));\r\n      \r\n      return themeVars;\r\n    } catch (error) {\r\n      console.error(\"Failed to generate theme from mood:\", error);\r\n      return null;\r\n    } finally {\r\n      setIsApplying(false);\r\n    }\r\n  };\r\n  \r\n  // Context value\r\n  const themeContextValue = {\r\n    currentTheme,\r\n    currentMood,\r\n    changeTheme,\r\n    generateThemeFromMood,\r\n    isApplying\r\n  };\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={themeContextValue}>\r\n      <div className=\"theme-manager-container\">\r\n        {children}\r\n        \r\n        <button \r\n          className=\"theme-picker-button\"\r\n          onClick={() => setShowPicker(!showPicker)}\r\n          aria-label=\"Change theme\"\r\n        >\r\n          <span className=\"theme-icon\">🎨</span>\r\n        </button>\r\n        \r\n        {showPicker && (\r\n          <div className=\"theme-picker\">\r\n            <h3>Color Theme</h3>\r\n            <div className=\"theme-options\">\r\n              <button \r\n                className={`theme-option ${currentTheme === 'auto' ? 'active' : ''}`}\r\n                onClick={() => changeTheme('auto')}\r\n              >\r\n                <div className=\"theme-preview auto\"></div>\r\n                <span className=\"theme-label\">Match Mood</span>\r\n              </button>\r\n              <button \r\n                className={`theme-option ${currentTheme === 'happy' ? 'active' : ''}`}\r\n                onClick={() => changeTheme('happy')}\r\n              >\r\n                <div className=\"theme-preview happy\"></div>\r\n                <span className=\"theme-label\">Happy</span>\r\n              </button>\r\n              <button \r\n                className={`theme-option ${currentTheme === 'calm' ? 'active' : ''}`}\r\n                onClick={() => changeTheme('calm')}\r\n              >\r\n                <div className=\"theme-preview calm\"></div>\r\n                <span className=\"theme-label\">Calm</span>\r\n              </button>\r\n              <button \r\n                className={`theme-option ${currentTheme === 'neutral' ? 'active' : ''}`}\r\n                onClick={() => changeTheme('neutral')}\r\n              >\r\n                <div className=\"theme-preview neutral\"></div>\r\n                <span className=\"theme-label\">Neutral</span>\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"generate-theme\">\r\n              <h4>Generate Theme from Emotion</h4>\r\n              <div className=\"mood-buttons\">\r\n                <button \r\n                  onClick={() => generateThemeFromMood('excited')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-excited\"\r\n                >\r\n                  Excited 😃\r\n                </button>\r\n                <button \r\n                  onClick={() => generateThemeFromMood('happy')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-happy\"\r\n                >\r\n                  Happy 😊\r\n                </button>\r\n                <button \r\n                  onClick={() => generateThemeFromMood('calm')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-calm\"\r\n                >\r\n                  Calm 😌\r\n                </button>\r\n                <button \r\n                  onClick={() => generateThemeFromMood('relaxed')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-relaxed\"\r\n                >\r\n                  Relaxed 😇\r\n                </button>\r\n                <button \r\n                  onClick={() => generateThemeFromMood('neutral')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-neutral\"\r\n                >\r\n                  Neutral 😐\r\n                </button>\r\n                <button \r\n                  onClick={() => generateThemeFromMood('sad')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-sad\"\r\n                >\r\n                  Sad 😢\r\n                </button>\r\n                <button \r\n                  onClick={() => generateThemeFromMood('anxious')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-anxious\"\r\n                >\r\n                  Anxious 😰\r\n                </button>\r\n                <button \r\n                  onClick={() => generateThemeFromMood('tired')}\r\n                  disabled={isApplying}\r\n                  className=\"mood-tired\"\r\n                >\r\n                  Tired 😴\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            {currentMood && (\r\n              <div style={{marginTop: '15px', textAlign: 'center', fontSize: '0.9rem', opacity: 0.7}}>\r\n                Current mood theme: <strong>{currentMood}</strong>\r\n              </div>\r\n            )}\r\n            \r\n            {isApplying && (\r\n              <div className=\"theme-applying\">\r\n                <div className=\"theme-spinner\"></div>\r\n                <span>Applying theme...</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </ThemeContext.Provider>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { saveJournalEntry } from '../services/storageService';\r\nimport { getUserLocation, fetchCurrentWeather } from '../services/weatherService';\r\nimport './JournalEntry.css';\r\nimport { useTheme } from './ThemeManager';\r\n\r\nconst JournalEntry = () => {\r\n    const [entry, setEntry] = useState({\r\n        mood: '',\r\n        moodValue: 5,\r\n        thoughts: '',\r\n        activities: [],\r\n        gratitude: '',\r\n        weather: null\r\n    });\r\n    const [showSuccess, setShowSuccess] = useState(false);\r\n    const [loadingWeather, setLoadingWeather] = useState(true);\r\n    const [weatherError, setWeatherError] = useState(null);\r\n    \r\n    // Add the theme context\r\n    const { generateThemeFromMood, currentTheme } = useTheme();\r\n\r\n    // Fetch weather data when component mounts\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n        const getWeatherData = async () => {\r\n            setLoadingWeather(true);\r\n            try {\r\n                const location = await getUserLocation();\r\n                const weatherData = await fetchCurrentWeather(location.latitude, location.longitude);\r\n                \r\n                if (isMounted) {\r\n                    if (weatherData && weatherData.current) {\r\n                        setEntry(prev => ({\r\n                            ...prev,\r\n                            weather: {\r\n                                temperature: weatherData.current.temperature_2m,\r\n                                weatherCode: weatherData.current.weather_code,\r\n                                humidity: weatherData.current.relative_humidity_2m,\r\n                                isDay: weatherData.current.is_day === 1\r\n                            }\r\n                        }));\r\n                    }\r\n                    setLoadingWeather(false);\r\n                }\r\n            } catch (error) {\r\n                if (isMounted) {\r\n                    console.error('Failed to load weather:', error);\r\n                    setWeatherError(\"Couldn't fetch weather data\");\r\n                    setLoadingWeather(false);\r\n                }\r\n            }\r\n        };\r\n        \r\n        getWeatherData();\r\n        \r\n        return () => {\r\n            isMounted = false;\r\n        };\r\n    }, []);\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEntry({\r\n            ...entry,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    // Update the handleMoodSlider function in the JournalEntry component\r\n    const handleMoodSlider = (e) => {\r\n        const newMoodValue = parseInt(e.target.value);\r\n        setEntry({\r\n            ...entry,\r\n            moodValue: newMoodValue\r\n        });\r\n        \r\n        // Always update theme when mood slider changes for immediate visual feedback\r\n        generateThemeFromMood(newMoodValue);\r\n        \r\n        // Also add mood text based on value\r\n        const moodTexts = {\r\n            1: 'Very sad',\r\n            2: 'Sad',\r\n            3: 'Anxious',\r\n            4: 'Stressed',\r\n            5: 'Neutral',\r\n            6: 'Content',\r\n            7: 'Calm',\r\n            8: 'Happy',\r\n            9: 'Very happy',\r\n            10: 'Excited'\r\n        };\r\n        \r\n        // Auto-suggest mood text but don't overwrite if user has entered their own\r\n        if (!entry.mood || entry.mood === getMoodLabel(entry.moodValue - 1)) {\r\n            setEntry(prev => ({\r\n                ...prev,\r\n                mood: moodTexts[newMoodValue] || ''\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleActivityToggle = (activity) => {\r\n        const updatedActivities = [...entry.activities];\r\n        \r\n        if (updatedActivities.includes(activity)) {\r\n            const index = updatedActivities.indexOf(activity);\r\n            updatedActivities.splice(index, 1);\r\n        } else {\r\n            updatedActivities.push(activity);\r\n        }\r\n        \r\n        setEntry({\r\n            ...entry,\r\n            activities: updatedActivities\r\n        });\r\n    };\r\n\r\n    const getMoodEmoji = (value) => {\r\n        const emojis = ['😞', '😔', '😕', '😐', '🙂', '😊', '😄', '😁', '🤩', '😍'];\r\n        return emojis[value - 1] || '😐';\r\n    };\r\n\r\n    const getMoodLabel = (value) => {\r\n        const labels = [\r\n            'Very sad', 'Sad', 'Down', 'Neutral', 'Okay', \r\n            'Good', 'Happy', 'Very happy', 'Excellent', 'Amazing'\r\n        ];\r\n        return labels[value - 1] || 'Neutral';\r\n    };\r\n\r\n    const getWeatherIcon = (weatherCode, isDay) => {\r\n        if (weatherCode === 0) return isDay ? '☀️' : '🌙';\r\n        if (weatherCode === 1) return isDay ? '🌤️' : '🌙';\r\n        if (weatherCode === 2) return isDay ? '⛅' : '☁️';\r\n        if (weatherCode === 3) return '☁️';\r\n        if (weatherCode >= 45 && weatherCode <= 48) return '🌫️';\r\n        if (weatherCode >= 51 && weatherCode <= 57) return '🌦️';\r\n        if (weatherCode >= 61 && weatherCode <= 67) return '🌧️';\r\n        if (weatherCode >= 71 && weatherCode <= 77) return '❄️';\r\n        if (weatherCode >= 80 && weatherCode <= 82) return '🌧️';\r\n        if (weatherCode >= 85 && weatherCode <= 86) return '🌨️';\r\n        if (weatherCode >= 95) return '⛈️';\r\n        \r\n        return isDay ? '☀️' : '🌙';\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const newEntry = {\r\n            ...entry,\r\n            date: new Date().toISOString()\r\n        };\r\n        \r\n        try {\r\n            await saveJournalEntry(newEntry);\r\n            setShowSuccess(true);\r\n            setTimeout(() => setShowSuccess(false), 3000);\r\n            \r\n            setEntry({\r\n                mood: '',\r\n                moodValue: 5,\r\n                thoughts: '',\r\n                activities: [],\r\n                gratitude: '',\r\n                weather: entry.weather\r\n            });\r\n        } catch (error) {\r\n            console.error('Failed to save entry:', error);\r\n        }\r\n    };\r\n\r\n    const activities = [\r\n        'Exercise', 'Reading', 'Meditation', 'Family time', \r\n        'Friends', 'Work', 'Hobby', 'Nature'\r\n    ];\r\n\r\n    return (\r\n        <div className=\"journal-entry\">\r\n            <h2>Daily Journal Entry</h2>\r\n            \r\n            {/* Add a theme indicator */}\r\n            <div className=\"theme-status\">\r\n                <small>UI color theme will update based on your mood</small>\r\n            </div>\r\n            \r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"weather-info\">\r\n                    {loadingWeather ? (\r\n                        <div className=\"weather-loading-mini\">Loading weather...</div>\r\n                    ) : weatherError ? (\r\n                        <div className=\"weather-error-mini\">{weatherError}</div>\r\n                    ) : entry.weather ? (\r\n                        <div className=\"current-weather-mini\">\r\n                            <span className=\"weather-icon-mini\">\r\n                                {getWeatherIcon(entry.weather.weatherCode, entry.weather.isDay)}\r\n                            </span>\r\n                            <span className=\"weather-temp-mini\">\r\n                                {Math.round(entry.weather.temperature)}°C\r\n                            </span>\r\n                            <span className=\"weather-note\">\r\n                                Weather is being recorded with your entry\r\n                            </span>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n\r\n                <div className=\"mood-selector\">\r\n                    <h3>How are you feeling today?</h3>\r\n                    \r\n                    <div className=\"mood-slider-container\">\r\n                        <input \r\n                            type=\"range\" \r\n                            min=\"1\" \r\n                            max=\"10\" \r\n                            value={entry.moodValue} \r\n                            onChange={handleMoodSlider}\r\n                            className=\"mood-slider\"\r\n                        />\r\n                        <div className=\"mood-emoji\">{getMoodEmoji(entry.moodValue)}</div>\r\n                        <div className=\"mood-label\">{getMoodLabel(entry.moodValue)}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"mood\">In one word, describe your mood:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"mood\"\r\n                        name=\"mood\"\r\n                        value={entry.mood}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"e.g. Peaceful, Anxious, Excited...\"\r\n                    />\r\n                </div>\r\n                \r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"thoughts\">What's on your mind today?</label>\r\n                    <textarea\r\n                        id=\"thoughts\"\r\n                        name=\"thoughts\"\r\n                        value={entry.thoughts}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"Share your thoughts, feelings, or experiences...\"\r\n                        rows=\"5\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Activities today: (select all that apply)</label>\r\n                    <div className=\"activity-tags\">\r\n                        {activities.map(activity => (\r\n                            <div \r\n                                key={activity}\r\n                                className={`activity-tag ${entry.activities.includes(activity) ? 'selected' : ''}`}\r\n                                onClick={() => handleActivityToggle(activity)}\r\n                            >\r\n                                {activity}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"gratitude\">What are you grateful for today?</label>\r\n                    <textarea\r\n                        id=\"gratitude\"\r\n                        name=\"gratitude\"\r\n                        value={entry.gratitude}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"List one or more things you appreciate today...\"\r\n                        rows=\"3\"\r\n                    />\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                    Save Entry\r\n                </button>\r\n                \r\n                {showSuccess && (\r\n                    <div className=\"success-message\">\r\n                        <span>✅ Journal entry saved successfully!</span>\r\n                    </div>\r\n                )}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JournalEntry;","import React, { useState, useEffect } from 'react';\r\nimport { getMoodEntries } from '../services/storageService';\r\nimport './JournalLog.css';\r\n\r\nconst JournalLog = () => {\r\n    const [entries, setEntries] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [filter, setFilter] = useState('all'); // all, week, month\r\n    const [selectedEntry, setSelectedEntry] = useState(null);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchEntries = async () => {\r\n            try {\r\n                const data = await getMoodEntries();\r\n                // Sort by date, newest first\r\n                const sortedData = data.sort((a, b) => \r\n                    new Date(b.date) - new Date(a.date)\r\n                );\r\n                setEntries(sortedData);\r\n            } catch (error) {\r\n                console.error(\"Error fetching journal entries:\", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchEntries();\r\n    }, []);\r\n\r\n    const getFilteredEntries = () => {\r\n        let filteredEntries = [...entries];\r\n        \r\n        // Apply date filter\r\n        if (filter === 'week') {\r\n            const oneWeekAgo = new Date();\r\n            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n            filteredEntries = filteredEntries.filter(entry => \r\n                new Date(entry.date) >= oneWeekAgo\r\n            );\r\n        } else if (filter === 'month') {\r\n            const oneMonthAgo = new Date();\r\n            oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n            filteredEntries = filteredEntries.filter(entry => \r\n                new Date(entry.date) >= oneMonthAgo\r\n            );\r\n        }\r\n        \r\n        // Apply search filter if search term exists\r\n        if (searchTerm.trim()) {\r\n            const term = searchTerm.toLowerCase();\r\n            filteredEntries = filteredEntries.filter(entry => \r\n                (entry.thoughts && entry.thoughts.toLowerCase().includes(term)) || \r\n                (entry.mood && entry.mood.toLowerCase().includes(term)) ||\r\n                (entry.gratitude && entry.gratitude.toLowerCase().includes(term))\r\n            );\r\n        }\r\n        \r\n        return filteredEntries;\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };\r\n        return new Date(dateString).toLocaleDateString(undefined, options);\r\n    };\r\n\r\n    const getMoodEmoji = (value) => {\r\n        const emojis = ['😞', '😔', '😕', '😐', '🙂', '😊', '😄', '😁', '🤩', '😍'];\r\n        return emojis[value - 1] || '😐';\r\n    };\r\n\r\n    const getWeatherIcon = (weatherCode, isDay) => {\r\n        if (weatherCode === 0) return isDay ? '☀️' : '🌙'; // Clear\r\n        if (weatherCode === 1) return isDay ? '🌤️' : '🌙'; // Mainly clear\r\n        if (weatherCode === 2) return isDay ? '⛅' : '☁️'; // Partly cloudy\r\n        if (weatherCode === 3) return '☁️'; // Overcast\r\n        if (weatherCode >= 45 && weatherCode <= 48) return '🌫️'; // Fog\r\n        if (weatherCode >= 51 && weatherCode <= 57) return '🌦️'; // Drizzle\r\n        if (weatherCode >= 61 && weatherCode <= 67) return '🌧️'; // Rain\r\n        if (weatherCode >= 71 && weatherCode <= 77) return '❄️'; // Snow\r\n        if (weatherCode >= 80 && weatherCode <= 82) return '🌧️'; // Rain showers\r\n        if (weatherCode >= 85 && weatherCode <= 86) return '🌨️'; // Snow showers\r\n        if (weatherCode >= 95) return '⛈️'; // Thunderstorm\r\n        \r\n        return isDay ? '☀️' : '🌙'; // Default\r\n    };\r\n\r\n    const getEntryStyle = (moodValue) => {\r\n        // Create a style based on the mood value\r\n        if (!moodValue) return {};\r\n        \r\n        // Generate a color based on mood\r\n        let borderColor;\r\n        let gradientColor;\r\n        \r\n        if (moodValue <= 2) {\r\n            // Sad moods: blue tones\r\n            borderColor = 'var(--sad-color, rgb(108, 117, 187))';\r\n            gradientColor = 'rgba(108, 117, 187, 0.05)';\r\n        } else if (moodValue === 3) {\r\n            // Anxious moods: amber tones\r\n            borderColor = 'var(--anxious-color, rgb(255, 177, 0))';\r\n            gradientColor = 'rgba(255, 177, 0, 0.05)';\r\n        } else if (moodValue === 4) {\r\n            // Stressed moods: orange tones\r\n            borderColor = 'var(--stressed-color, rgb(242, 103, 34))';\r\n            gradientColor = 'rgba(242, 103, 34, 0.05)';\r\n        } else if (moodValue === 5) {\r\n            // Neutral moods: gray tones\r\n            borderColor = 'var(--neutral-color, rgb(190, 190, 190))';\r\n            gradientColor = 'rgba(190, 190, 190, 0.05)';\r\n        } else if (moodValue === 6) {\r\n            // Content moods: lavender tones\r\n            borderColor = 'var(--tired-color, rgb(147, 112, 170))'; \r\n            gradientColor = 'rgba(147, 112, 170, 0.05)';\r\n        } else if (moodValue === 7) {\r\n            // Calm moods: blue tones\r\n            borderColor = 'var(--calm-color, rgb(86, 161, 200))';\r\n            gradientColor = 'rgba(86, 161, 200, 0.05)';\r\n        } else if (moodValue === 8) {\r\n            // Relaxed moods: green tones\r\n            borderColor = 'var(--relaxed-color, rgb(106, 177, 135))';\r\n            gradientColor = 'rgba(106, 177, 135, 0.05)';\r\n        } else if (moodValue === 9) {\r\n            // Happy moods: yellow tones\r\n            borderColor = 'var(--happy-color, rgb(255, 195, 0))';\r\n            gradientColor = 'rgba(255, 195, 0, 0.05)';\r\n        } else {\r\n            // Excited moods: red-orange tones\r\n            borderColor = 'var(--excited-color, rgb(255, 89, 94))';\r\n            gradientColor = 'rgba(255, 89, 94, 0.05)';\r\n        }\r\n        \r\n        return {\r\n            borderLeft: `4px solid ${borderColor}`,\r\n            background: `linear-gradient(to right, ${gradientColor}, transparent 20%)`\r\n        };\r\n    };\r\n\r\n    const handleEntryClick = (entry) => {\r\n        setSelectedEntry(entry);\r\n    };\r\n\r\n    const closeEntryDetails = () => {\r\n        setSelectedEntry(null);\r\n    };\r\n\r\n    return (\r\n        <div className=\"journal-log\">\r\n            <h2>Your Journal History</h2>\r\n            \r\n            <div className=\"journal-controls\">\r\n                <div className=\"search-box\">\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Search your entries...\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                </div>\r\n                \r\n                <div className=\"filter-controls\">\r\n                    <button \r\n                        className={filter === 'all' ? 'active' : ''} \r\n                        onClick={() => setFilter('all')}>\r\n                        All Time\r\n                    </button>\r\n                    <button \r\n                        className={filter === 'month' ? 'active' : ''} \r\n                        onClick={() => setFilter('month')}>\r\n                        Past Month\r\n                    </button>\r\n                    <button \r\n                        className={filter === 'week' ? 'active' : ''} \r\n                        onClick={() => setFilter('week')}>\r\n                        Past Week\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {loading ? (\r\n                <div className=\"loading-spinner\">\r\n                    <div className=\"spinner\"></div>\r\n                    <p>Loading your journal entries...</p>\r\n                </div>\r\n            ) : (\r\n                <div className=\"entries-list\">\r\n                    {getFilteredEntries().length > 0 ? (\r\n                        getFilteredEntries().map((entry, index) => (\r\n                            <div \r\n                                key={index} \r\n                                className=\"entry-card\"\r\n                                onClick={() => handleEntryClick(entry)}\r\n                                style={getEntryStyle(entry.moodValue)}\r\n                            >\r\n                                <div className=\"entry-header\">\r\n                                    <span className=\"entry-date\">{formatDate(entry.date)}</span>\r\n                                    <span className=\"entry-mood\">\r\n                                        {getMoodEmoji(entry.moodValue)} {entry.mood || `Level ${entry.moodValue}`}\r\n                                    </span>\r\n                                </div>\r\n                                {entry.weather && (\r\n                                    <div className=\"entry-weather\">\r\n                                        <span className=\"weather-icon\">\r\n                                            {getWeatherIcon(entry.weather.weatherCode, entry.weather.isDay)}\r\n                                        </span>\r\n                                        <span className=\"weather-temp\">{Math.round(entry.weather.temperature)}°C</span>\r\n                                    </div>\r\n                                )}\r\n                                <div className=\"entry-preview\">\r\n                                    {entry.thoughts ? (\r\n                                        <p>{entry.thoughts.substring(0, 100)}\r\n                                            {entry.thoughts.length > 100 ? '...' : ''}\r\n                                        </p>\r\n                                    ) : (\r\n                                        <p className=\"no-content\">No thoughts recorded</p>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"entry-footer\">\r\n                                    {entry.activities && entry.activities.length > 0 && (\r\n                                        <div className=\"entry-tags\">\r\n                                            {entry.activities.slice(0, 3).map((activity, i) => (\r\n                                                <span key={i} className=\"activity-tag\">{activity}</span>\r\n                                            ))}\r\n                                            {entry.activities.length > 3 && <span className=\"more-tag\">+{entry.activities.length - 3}</span>}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <div className=\"no-entries\">\r\n                            <p>No journal entries found</p>\r\n                            {searchTerm && <p>Try changing your search term</p>}\r\n                            {filter !== 'all' && <p>Try changing your date filter</p>}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {selectedEntry && (\r\n                <div className=\"entry-modal-overlay\" onClick={closeEntryDetails}>\r\n                    <div className=\"entry-modal\" onClick={(e) => e.stopPropagation()}>\r\n                        <button className=\"close-button\" onClick={closeEntryDetails}>×</button>\r\n                        <div className=\"entry-modal-date\">{formatDate(selectedEntry.date)}</div>\r\n                        \r\n                        <div className=\"entry-modal-mood\">\r\n                            <span className=\"large-emoji\">{getMoodEmoji(selectedEntry.moodValue)}</span>\r\n                            <h3>{selectedEntry.mood || `Mood Level: ${selectedEntry.moodValue}`}</h3>\r\n                        </div>\r\n                        \r\n                        <div className=\"entry-modal-section\">\r\n                            <h4>Thoughts</h4>\r\n                            <p>{selectedEntry.thoughts || \"No thoughts recorded\"}</p>\r\n                        </div>\r\n                        \r\n                        {selectedEntry.activities && selectedEntry.activities.length > 0 && (\r\n                            <div className=\"entry-modal-section\">\r\n                                <h4>Activities</h4>\r\n                                <div className=\"activity-tags\">\r\n                                    {selectedEntry.activities.map((activity, i) => (\r\n                                        <span key={i} className=\"activity-tag\">{activity}</span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        \r\n                        {selectedEntry.gratitude && (\r\n                            <div className=\"entry-modal-section\">\r\n                                <h4>Gratitude</h4>\r\n                                <p>{selectedEntry.gratitude}</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JournalLog;","import React, { useState, useEffect } from 'react';\r\nimport { Chart as ChartJS, registerables } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { getMoodData } from '../services/storageService';\r\nimport './MoodTracker.css';\r\n\r\n// Register Chart.js components\r\nChartJS.register(...registerables);\r\n\r\nconst MoodTracker = () => {\r\n    const [moodData, setMoodData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [timeRange, setTimeRange] = useState('week');\r\n    const [showGrid, setShowGrid] = useState(true);\r\n    const [chartDataState, setChartDataState] = useState({\r\n        labels: [],\r\n        datasets: [{\r\n            label: 'Mood Trend',\r\n            data: [],\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n            borderWidth: 1\r\n        }]\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchMoodData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                // In a real app, fetch from your storage service\r\n                const data = await getMoodData();\r\n                // If no data yet, use sample data for demonstration\r\n                const moods = data && data.length > 0 ? data : generateSampleMoodData();\r\n                setMoodData(moods);\r\n            } catch (error) {\r\n                console.error(\"Error fetching mood data:\", error);\r\n                // Fallback to sample data if there's an error\r\n                setMoodData(generateSampleMoodData());\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchMoodData();\r\n    }, []);\r\n\r\n    // Update chart data whenever mood data or time range changes\r\n    useEffect(() => {\r\n        if (moodData && moodData.length > 0) {\r\n            updateChartData();\r\n        }\r\n    }, [moodData, timeRange]);\r\n\r\n    const generateSampleMoodData = () => {\r\n        // Create sample data with a realistic pattern\r\n        const today = new Date();\r\n        const sampleData = [];\r\n        \r\n        for (let i = 30; i >= 0; i--) {\r\n            const date = new Date(today);\r\n            date.setDate(today.getDate() - i);\r\n            \r\n            // Generate a somewhat realistic mood pattern\r\n            let moodValue;\r\n            \r\n            if (i % 7 === 0) {\r\n                // Weekend effect - slightly happier\r\n                moodValue = Math.min(10, Math.floor(Math.random() * 3) + 7);\r\n            } else if (i % 5 === 0) {\r\n                // Some bad days\r\n                moodValue = Math.max(1, Math.floor(Math.random() * 3) + 2);\r\n            } else {\r\n                // Normal days - between 4 and 8\r\n                moodValue = Math.floor(Math.random() * 5) + 4;\r\n            }\r\n            \r\n            sampleData.push({\r\n                date: date.toISOString().split('T')[0],\r\n                moodValue: moodValue,\r\n                mood: getMoodLabel(moodValue - 1)\r\n            });\r\n        }\r\n        \r\n        return sampleData;\r\n    };\r\n\r\n    const filteredData = () => {\r\n        if (!moodData || moodData.length === 0) {\r\n            return [];\r\n        }\r\n        \r\n        const now = new Date();\r\n        let cutoff = new Date();\r\n        \r\n        if (timeRange === 'week') {\r\n            cutoff.setDate(now.getDate() - 7);\r\n        } else if (timeRange === 'month') {\r\n            cutoff.setMonth(now.getMonth() - 1);\r\n        } else if (timeRange === 'year') {\r\n            cutoff.setFullYear(now.getFullYear() - 1);\r\n        } else {\r\n            // All time - no filtering\r\n            return moodData;\r\n        }\r\n        \r\n        return moodData.filter(entry => new Date(entry.date) >= cutoff);\r\n    };\r\n\r\n    const formatDisplayDate = (dateStr) => {\r\n        const date = new Date(dateStr);\r\n        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    };\r\n\r\n    // Generate beautiful gradient for the chart\r\n    const createGradient = (ctx) => {\r\n        if (!ctx) return 'rgba(66, 133, 244, 0.2)';\r\n        \r\n        const gradient = ctx.createLinearGradient(0, 0, 0, 300);\r\n        gradient.addColorStop(0, 'rgba(66, 133, 244, 0.6)');\r\n        gradient.addColorStop(1, 'rgba(66, 133, 244, 0.1)');\r\n        return gradient;\r\n    };\r\n\r\n    // Update chart data state\r\n    const updateChartData = () => {\r\n        const filtered = filteredData();\r\n        \r\n        if (!filtered || filtered.length === 0) {\r\n            setChartDataState({\r\n                labels: [],\r\n                datasets: [{\r\n                    label: 'Mood Trend',\r\n                    data: [],\r\n                    borderColor: 'rgba(75, 192, 192, 1)',\r\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                    borderWidth: 1\r\n                }]\r\n            });\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            const labels = filtered.map(entry => formatDisplayDate(entry.date));\r\n            const data = filtered.map(entry => entry.moodValue || 0);\r\n            \r\n            setChartDataState({\r\n                labels: labels,\r\n                datasets: [{\r\n                    label: 'Mood Level',\r\n                    data: data,\r\n                    borderColor: 'rgba(66, 133, 244, 1)',\r\n                    backgroundColor: 'rgba(66, 133, 244, 0.2)',\r\n                    fill: true,\r\n                    tension: 0.4,\r\n                    pointBackgroundColor: 'rgba(66, 133, 244, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointBorderWidth: 2,\r\n                    pointRadius: 4,\r\n                    pointHoverRadius: 6\r\n                }]\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error updating chart data:\", error);\r\n            // Set fallback empty data structure\r\n            setChartDataState({\r\n                labels: [],\r\n                datasets: [{\r\n                    label: 'Mood Trend',\r\n                    data: [],\r\n                    borderColor: 'rgba(75, 192, 192, 1)',\r\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                    borderWidth: 1\r\n                }]\r\n            });\r\n        }\r\n    };\r\n\r\n    const chartOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                display: false\r\n            },\r\n            tooltip: {\r\n                mode: 'index',\r\n                intersect: false,\r\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                titleColor: '#333',\r\n                bodyColor: '#555',\r\n                borderColor: '#ddd',\r\n                borderWidth: 1,\r\n                padding: 10,\r\n                displayColors: false,\r\n                bodyFont: {\r\n                    size: 14\r\n                },\r\n                callbacks: {\r\n                    title: function(context) {\r\n                        return context[0].label;\r\n                    },\r\n                    label: function(context) {\r\n                        return `Mood: ${context.raw}/10`;\r\n                    },\r\n                    afterLabel: function(context) {\r\n                        const filtered = filteredData();\r\n                        if (!filtered || !context || context.dataIndex === undefined) return '';\r\n                        const entry = filtered[context.dataIndex];\r\n                        return entry && entry.mood ? `Feeling: ${entry.mood}` : '';\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            y: {\r\n                min: 0,\r\n                max: 10,\r\n                ticks: {\r\n                    stepSize: 1,\r\n                    font: {\r\n                        size: 12\r\n                    },\r\n                    color: '#666'\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Mood Level',\r\n                    font: {\r\n                        size: 14,\r\n                        weight: 'bold'\r\n                    },\r\n                    color: '#555'\r\n                },\r\n                grid: {\r\n                    display: showGrid,\r\n                    color: 'rgba(0, 0, 0, 0.05)'\r\n                }\r\n            },\r\n            x: {\r\n                ticks: {\r\n                    font: {\r\n                        size: 11\r\n                    },\r\n                    color: '#666',\r\n                    maxRotation: 45,\r\n                    minRotation: 0\r\n                },\r\n                grid: {\r\n                    display: showGrid,\r\n                    color: 'rgba(0, 0, 0, 0.05)'\r\n                }\r\n            }\r\n        },\r\n        interaction: {\r\n            mode: 'nearest',\r\n            axis: 'x',\r\n            intersect: false\r\n        },\r\n        elements: {\r\n            line: {\r\n                tension: 0.4\r\n            }\r\n        }\r\n    };\r\n\r\n    const calculateMoodStatistics = () => {\r\n        const filtered = filteredData();\r\n        \r\n        if (!filtered || filtered.length === 0) {\r\n            return {\r\n                avg: \"0.0\",\r\n                highest: \"0\",\r\n                lowest: \"0\",\r\n                entries: 0\r\n            };\r\n        }\r\n        \r\n        const moodValues = filtered.map(entry => entry.moodValue);\r\n        const sum = moodValues.reduce((total, value) => total + value, 0);\r\n        const avg = (sum / moodValues.length).toFixed(1);\r\n        const highest = Math.max(...moodValues);\r\n        const lowest = Math.min(...moodValues);\r\n        \r\n        return {\r\n            avg,\r\n            highest,\r\n            lowest,\r\n            entries: filtered.length\r\n        };\r\n    };\r\n\r\n    const stats = calculateMoodStatistics();\r\n    \r\n    // Helper function for mood labels\r\n    function getMoodLabel(value) {\r\n        const labels = [\r\n            'Very sad', 'Sad', 'Down', 'Neutral', 'Okay', \r\n            'Good', 'Happy', 'Very happy', 'Excellent', 'Amazing'\r\n        ];\r\n        return labels[value] || 'Neutral';\r\n    }\r\n\r\n    return (\r\n        <div className=\"mood-tracker\">\r\n            <h2>Mood Trends</h2>\r\n            \r\n            <div className=\"chart-controls\">\r\n                <div className=\"time-range-selector\">\r\n                    <button \r\n                        className={timeRange === 'week' ? 'active' : ''} \r\n                        onClick={() => setTimeRange('week')}>\r\n                        Week\r\n                    </button>\r\n                    <button \r\n                        className={timeRange === 'month' ? 'active' : ''} \r\n                        onClick={() => setTimeRange('month')}>\r\n                        Month\r\n                    </button>\r\n                    <button \r\n                        className={timeRange === 'year' ? 'active' : ''} \r\n                        onClick={() => setTimeRange('year')}>\r\n                        Year\r\n                    </button>\r\n                    <button \r\n                        className={timeRange === 'all' ? 'active' : ''} \r\n                        onClick={() => setTimeRange('all')}>\r\n                        All Time\r\n                    </button>\r\n                </div>\r\n                \r\n                <label className=\"toggle-grid\">\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        checked={showGrid} \r\n                        onChange={() => setShowGrid(!showGrid)} \r\n                    />\r\n                    Show Grid\r\n                </label>\r\n            </div>\r\n            \r\n            {loading ? (\r\n                <div className=\"loading-spinner\">\r\n                    <div className=\"spinner\"></div>\r\n                    <p>Loading your mood data...</p>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <div className=\"chart-container\">\r\n                        {moodData && moodData.length > 0 ? (\r\n                            <Line data={chartDataState} options={chartOptions} />\r\n                        ) : (\r\n                            <div className=\"no-data-message\">\r\n                                <p>No mood data available yet. Start logging your daily moods!</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    \r\n                    <div className=\"mood-statistics\">\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-value\">{stats.avg}</div>\r\n                            <div className=\"stat-label\">Average Mood</div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-value\">{stats.highest}</div>\r\n                            <div className=\"stat-label\">Highest Mood</div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-value\">{stats.lowest}</div>\r\n                            <div className=\"stat-label\">Lowest Mood</div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-value\">{stats.entries}</div>\r\n                            <div className=\"stat-label\">Total Entries</div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"mood-insights\">\r\n                        <h3>Insights</h3>\r\n                        {filteredData().length > 0 ? (\r\n                            <>\r\n                                <p>Your average mood is <span className=\"highlight\">{stats.avg}/10</span> over the selected period.</p>\r\n                                {stats.entries > 3 && (\r\n                                    <p>You've been consistently tracking your mood - great job maintaining your mental health routine!</p>\r\n                                )}\r\n                                {timeRange !== 'week' && stats.entries > 7 && (\r\n                                    <p>Tip: Looking at weekly patterns can help identify specific triggers that affect your mood.</p>\r\n                                )}\r\n                            </>\r\n                        ) : (\r\n                            <p>Not enough data for this time period. Keep logging entries to see insights.</p>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoodTracker;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useTheme } from './ThemeManager';\r\nimport './BreathingExercises.css';\r\n\r\nconst BreathingExercises = () => {\r\n    const [activeExercise, setActiveExercise] = useState(null);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [counter, setCounter] = useState(0);\r\n    const [phase, setPhase] = useState('');\r\n    const [cycles, setCycles] = useState(0);\r\n    const [selectedCategory, setSelectedCategory] = useState('all');\r\n    const [progress, setProgress] = useState(0);\r\n    const [totalDuration, setTotalDuration] = useState(0);\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const timerRef = useRef(null);\r\n    const audioRef = useRef(null);\r\n    const phaseTimerRef = useRef(null);\r\n    const countdownIntervalRef = useRef(null);\r\n    const { currentTheme } = useTheme();\r\n    \r\n    const exercises = [\r\n        {\r\n            id: 'box',\r\n            title: \"Box Breathing\",\r\n            description: \"A powerful stress-reducer used by Navy SEALs. Creates a rhythm of equal parts inhale, hold, exhale, and hold.\",\r\n            phases: [\r\n                { name: 'Inhale', duration: 4, instruction: 'Breathe in slowly through your nose, filling your lungs completely' },\r\n                { name: 'Hold', duration: 4, instruction: 'Hold your breath, keeping your chest expanded' },\r\n                { name: 'Exhale', duration: 4, instruction: 'Release breath slowly through your mouth with pursed lips' },\r\n                { name: 'Hold', duration: 4, instruction: 'Keep lungs empty and relax your chest' }\r\n            ],\r\n            totalCycles: 4,\r\n            benefits: [\r\n                \"Reduces stress and anxiety\",\r\n                \"Improves concentration and focus\",\r\n                \"Regulates autonomic nervous system\",\r\n                \"Can be done anywhere, anytime\"\r\n            ],\r\n            category: 'stress',\r\n            color: '#4285f4',\r\n            animationType: 'box',\r\n            icon: '⬛'\r\n        },\r\n        {\r\n            id: '4-7-8',\r\n            title: \"4-7-8 Breathing\",\r\n            description: \"Developed by Dr. Andrew Weil, this technique acts as a natural tranquilizer for the nervous system.\",\r\n            phases: [\r\n                { name: 'Inhale', duration: 4, instruction: 'Breathe in quietly through your nose for a count of 4' },\r\n                { name: 'Hold', duration: 7, instruction: 'Hold your breath for a count of 7, maintaining relaxed muscles' },\r\n                { name: 'Exhale', duration: 8, instruction: 'Exhale completely through your mouth with a whooshing sound for 8 counts' }\r\n            ],\r\n            totalCycles: 4,\r\n            benefits: [\r\n                \"Helps you fall asleep quickly\",\r\n                \"Manages food cravings\",\r\n                \"Reduces anxiety and stress\",\r\n                \"Controls emotional responses\"\r\n            ],\r\n            category: 'sleep',\r\n            color: '#673ab7',\r\n            animationType: 'circle',\r\n            icon: '🌙'\r\n        },\r\n        {\r\n            id: 'diaphragmatic',\r\n            title: \"Diaphragmatic Breathing\",\r\n            description: \"Also known as 'belly breathing', it strengthens the diaphragm and reduces stress by encouraging full oxygen exchange.\",\r\n            phases: [\r\n                { name: 'Inhale', duration: 5, instruction: 'Breathe in deeply through your nose, expanding your belly, not your chest' },\r\n                { name: 'Exhale', duration: 5, instruction: 'Breathe out slowly through pursed lips, feeling your belly contract' }\r\n            ],\r\n            totalCycles: 5,\r\n            benefits: [\r\n                \"Slows heart rate and lowers blood pressure\",\r\n                \"Strengthens diaphragm muscles\",\r\n                \"Reduces cortisol levels\",\r\n                \"Improves core muscle stability\"\r\n            ],\r\n            category: 'focus',\r\n            color: '#0f9d58',\r\n            animationType: 'wave',\r\n            icon: '🌊'\r\n        },\r\n        {\r\n            id: 'resonant',\r\n            title: \"Resonant Breathing\",\r\n            description: \"Breathe at a rate of 5-7 breaths per minute to achieve resonance with heart rhythms and optimize HRV (Heart Rate Variability).\",\r\n            phases: [\r\n                { name: 'Inhale', duration: 5.5, instruction: 'Breathe in slowly through your nose for 5.5 seconds' },\r\n                { name: 'Exhale', duration: 5.5, instruction: 'Breathe out slowly through your nose for 5.5 seconds' }\r\n            ],\r\n            totalCycles: 6,\r\n            benefits: [\r\n                \"Optimizes heart rate variability\",\r\n                \"Creates mind-body coherence\",\r\n                \"Boosts immune system function\",\r\n                \"Enhances emotional regulation\"\r\n            ],\r\n            category: 'calm',\r\n            color: '#ff6d00',\r\n            animationType: 'pulse',\r\n            icon: '💓'\r\n        },\r\n        {\r\n            id: '2-to-1',\r\n            title: \"2-to-1 Breathing\",\r\n            description: \"Emphasizes longer exhalations to activate the parasympathetic nervous system for deep relaxation and stress relief.\",\r\n            phases: [\r\n                { name: 'Inhale', duration: 4, instruction: 'Breathe in through your nose for a count of 4' },\r\n                { name: 'Exhale', duration: 8, instruction: 'Breathe out slowly through your nose or mouth for a count of 8' }\r\n            ],\r\n            totalCycles: 5,\r\n            benefits: [\r\n                \"Activates the relaxation response\",\r\n                \"Reduces blood pressure quickly\",\r\n                \"Helps with insomnia\",\r\n                \"Calms anxious thoughts\"\r\n            ],\r\n            category: 'sleep',\r\n            color: '#db4437',\r\n            animationType: 'expand',\r\n            icon: '🌬️'\r\n        },\r\n        {\r\n            id: 'alternate-nostril',\r\n            title: \"Alternate Nostril Breathing\",\r\n            description: \"Traditional yogic practice (Nadi Shodhana) that balances the hemispheres of your brain and promotes mental clarity.\",\r\n            phases: [\r\n                { name: 'Close Right Nostril', duration: 2, instruction: 'Use your right thumb to close your right nostril' },\r\n                { name: 'Inhale Left', duration: 4, instruction: 'Breathe in slowly through your left nostril' },\r\n                { name: 'Close Both Nostrils', duration: 2, instruction: 'Close both nostrils with your thumb and ring finger' },\r\n                { name: 'Open Right Nostril', duration: 2, instruction: 'Release your thumb from your right nostril' },\r\n                { name: 'Exhale Right', duration: 4, instruction: 'Breathe out through your right nostril' },\r\n                { name: 'Inhale Right', duration: 4, instruction: 'Breathe in through your right nostril' },\r\n                { name: 'Close Both Nostrils', duration: 2, instruction: 'Close both nostrils again' },\r\n                { name: 'Open Left Nostril', duration: 2, instruction: 'Release your ring finger from your left nostril' },\r\n                { name: 'Exhale Left', duration: 4, instruction: 'Breathe out through your left nostril' }\r\n            ],\r\n            totalCycles: 3,\r\n            benefits: [\r\n                \"Balances left and right brain hemispheres\",\r\n                \"Enhances mental clarity and alertness\",\r\n                \"Prepares the mind for meditation\",\r\n                \"Purifies subtle energy channels\"\r\n            ],\r\n            category: 'focus',\r\n            color: '#9c27b0',\r\n            animationType: 'alternate',\r\n            icon: '👃'\r\n        },\r\n        {\r\n            id: 'progressive',\r\n            title: \"Progressive Relaxation Breathing\",\r\n            description: \"Combines deep breathing with muscle relaxation to systematically release physical tension throughout your body.\",\r\n            phases: [\r\n                { name: 'Inhale', duration: 4, instruction: 'Breathe in deeply, gently tensing your muscles' },\r\n                { name: 'Hold', duration: 2, instruction: 'Hold your breath and the tension' },\r\n                { name: 'Exhale', duration: 6, instruction: 'Breathe out slowly, releasing all tension' },\r\n                { name: 'Rest', duration: 2, instruction: 'Rest and notice the sensation of relaxation' }\r\n            ],\r\n            totalCycles: 4,\r\n            benefits: [\r\n                \"Releases chronic muscle tension\",\r\n                \"Improves body awareness\",\r\n                \"Reduces physical symptoms of stress\",\r\n                \"Helps with chronic pain management\"\r\n            ],\r\n            category: 'stress',\r\n            color: '#795548',\r\n            animationType: 'relax',\r\n            icon: '🧠'\r\n        },\r\n        {\r\n            id: 'coherent',\r\n            title: \"Coherent Breathing\",\r\n            description: \"A simple yet powerful technique that promotes heart-brain coherence through a steady rhythm of 5 breaths per minute.\",\r\n            phases: [\r\n                { name: 'Inhale', duration: 6, instruction: 'Breathe in slowly through your nose for a count of 6' },\r\n                { name: 'Exhale', duration: 6, instruction: 'Breathe out slowly through your nose for a count of 6' }\r\n            ],\r\n            totalCycles: 5,\r\n            benefits: [\r\n                \"Synchronizes heart rate variability\",\r\n                \"Enhances cognitive performance\",\r\n                \"Improves emotional stability\",\r\n                \"Reduces symptoms of anxiety and depression\"\r\n            ],\r\n            category: 'calm',\r\n            color: '#03a9f4',\r\n            animationType: 'sphere',\r\n            icon: '🔵'\r\n        }\r\n    ];\r\n\r\n    const categories = [\r\n        { id: 'all', name: 'All Exercises' },\r\n        { id: 'stress', name: 'Stress Relief' },\r\n        { id: 'focus', name: 'Focus & Clarity' },\r\n        { id: 'sleep', name: 'Sleep Aid' },\r\n        { id: 'calm', name: 'Calming' }\r\n    ];\r\n\r\n    const clearAllTimers = () => {\r\n        if (timerRef.current) clearTimeout(timerRef.current);\r\n        if (phaseTimerRef.current) clearInterval(phaseTimerRef.current);\r\n        if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\r\n        timerRef.current = null;\r\n        phaseTimerRef.current = null;\r\n        countdownIntervalRef.current = null;\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            clearAllTimers();\r\n            if (audioRef.current) {\r\n                audioRef.current.pause();\r\n                audioRef.current = null;\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const playSound = (soundType) => {\r\n        try {\r\n            if (audioRef.current) {\r\n                audioRef.current.pause();\r\n                audioRef.current = null;\r\n            }\r\n\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const oscillator = audioContext.createOscillator();\r\n            const gainNode = audioContext.createGain();\r\n\r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(audioContext.destination);\r\n\r\n            switch (soundType) {\r\n                case 'inhale':\r\n                    oscillator.type = 'sine';\r\n                    oscillator.frequency.value = 440;\r\n                    gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n                    gainNode.gain.linearRampToValueAtTime(0.2, audioContext.currentTime + 0.1);\r\n                    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.5);\r\n                    oscillator.start();\r\n                    oscillator.stop(audioContext.currentTime + 0.6);\r\n                    break;\r\n                case 'exhale':\r\n                    oscillator.type = 'sine';\r\n                    oscillator.frequency.value = 330;\r\n                    gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n                    gainNode.gain.linearRampToValueAtTime(0.2, audioContext.currentTime + 0.1);\r\n                    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.7);\r\n                    oscillator.start();\r\n                    oscillator.stop(audioContext.currentTime + 0.8);\r\n                    break;\r\n                case 'hold':\r\n                    oscillator.type = 'sine';\r\n                    oscillator.frequency.value = 392;\r\n                    gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n                    gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.1);\r\n                    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.3);\r\n                    oscillator.start();\r\n                    oscillator.stop(audioContext.currentTime + 0.4);\r\n                    break;\r\n                case 'complete':\r\n                    oscillator.type = 'sine';\r\n                    oscillator.frequency.value = 523.25;\r\n                    gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n                    gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);\r\n                    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 1.5);\r\n                    oscillator.start();\r\n                    oscillator.stop(audioContext.currentTime + 1.6);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error playing sound:\", error);\r\n        }\r\n    };\r\n\r\n    const startExercise = (exercise) => {\r\n        if (isPlaying) return;\r\n\r\n        clearAllTimers();\r\n        setActiveExercise(exercise);\r\n        setIsPlaying(true);\r\n        setCycles(1);\r\n        setPhase('');\r\n        setCounter(0);\r\n\r\n        const cycleDuration = exercise.phases.reduce((total, phase) => total + phase.duration, 0);\r\n        const totalTime = cycleDuration * exercise.totalCycles;\r\n        setTotalDuration(totalTime);\r\n        setElapsedTime(0);\r\n        \r\n        runExercise(exercise, 0, 0);\r\n\r\n        phaseTimerRef.current = setInterval(() => {\r\n            setElapsedTime(prev => {\r\n                if (prev >= totalTime) {\r\n                    clearInterval(phaseTimerRef.current);\r\n                    return totalTime;\r\n                }\r\n                return prev + 0.1;\r\n            });\r\n        }, 100);\r\n    };\r\n\r\n    const runExercise = (exercise, cycleIndex, phaseIndex) => {\r\n        if (!exercise || !exercise.phases || exercise.phases.length === 0) {\r\n            console.error(\"Invalid exercise data\");\r\n            stopExercise();\r\n            return;\r\n        }\r\n        \r\n        if (cycleIndex >= exercise.totalCycles) {\r\n            clearAllTimers();\r\n            setIsPlaying(false);\r\n            setCycles(exercise.totalCycles);\r\n            setPhase('Complete!');\r\n            setCounter(0);\r\n            playSound('complete');\r\n            return;\r\n        }\r\n\r\n        const currentPhase = exercise.phases[phaseIndex];\r\n        setPhase(currentPhase.name);\r\n        setCounter(currentPhase.duration);\r\n        setCycles(cycleIndex + 1);\r\n        playSound(currentPhase.name.toLowerCase());\r\n\r\n        let timeRemaining = currentPhase.duration;\r\n        \r\n        if (countdownIntervalRef.current) {\r\n            clearInterval(countdownIntervalRef.current);\r\n        }\r\n        \r\n        countdownIntervalRef.current = setInterval(() => {\r\n            timeRemaining -= 1;\r\n            setCounter(timeRemaining);\r\n            \r\n            if (timeRemaining <= 0) {\r\n                clearInterval(countdownIntervalRef.current);\r\n                countdownIntervalRef.current = null;\r\n                \r\n                let nextPhaseIndex = phaseIndex + 1;\r\n                let nextCycleIndex = cycleIndex;\r\n                \r\n                if (nextPhaseIndex >= exercise.phases.length) {\r\n                    nextPhaseIndex = 0;\r\n                    nextCycleIndex += 1;\r\n                }\r\n                \r\n                timerRef.current = setTimeout(() => {\r\n                    if (isPlaying) {\r\n                        runExercise(exercise, nextCycleIndex, nextPhaseIndex);\r\n                    }\r\n                }, 300);\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const stopExercise = () => {\r\n        clearAllTimers();\r\n        setIsPlaying(false);\r\n        setActiveExercise(null);\r\n        setCounter(0);\r\n        setPhase('');\r\n        setCycles(0);\r\n        setElapsedTime(0);\r\n        setProgress(0);\r\n    };\r\n\r\n    const filteredExercises = selectedCategory === 'all' \r\n        ? exercises \r\n        : exercises.filter(ex => ex.category === selectedCategory);\r\n\r\n    const progressPercentage = totalDuration > 0 \r\n        ? Math.min((elapsedTime / totalDuration) * 100, 100) \r\n        : 0;\r\n\r\n    return (\r\n        <div className=\"breathing-exercises\">\r\n            <h2>\r\n                <span className=\"breathing-title-icon\">🧘</span> \r\n                Breathing Exercises\r\n            </h2>\r\n            \r\n            {activeExercise ? (\r\n                <div className={`active-exercise ${activeExercise.animationType}`} style={{\r\n                    background: `linear-gradient(135deg, ${activeExercise.color}20, ${activeExercise.color}05)`,\r\n                    borderLeft: `4px solid ${activeExercise.color}`\r\n                }}>\r\n                    <h3>{activeExercise.title}</h3>\r\n                    \r\n                    <div className=\"breathing-animation-container\">\r\n                        {activeExercise.animationType === 'alternate' ? (\r\n                            <div className=\"breathing-circle alternate\">\r\n                                <div className=\"nostril-guide\">\r\n                                    <div className=\"face-silhouette\"></div>\r\n                                    <div className={`nostril left ${phase.includes('Left') ? 'active' : ''}`}></div>\r\n                                    <div className={`nostril right ${phase.includes('Right') ? 'active' : ''}`}></div>\r\n                                </div>\r\n                            </div>\r\n                        ) : activeExercise.animationType === 'sphere' ? (\r\n                            <div className={`breathing-sphere ${phase.toLowerCase()}`}>\r\n                                <div className=\"sphere-inner\">\r\n                                    <div className=\"counter\">{counter}</div>\r\n                                </div>\r\n                                <div className=\"sphere-ripple\"></div>\r\n                            </div>\r\n                        ) : (\r\n                            <div \r\n                                className={`breathing-circle ${activeExercise.animationType} ${phase.toLowerCase()}`} \r\n                                style={{borderColor: activeExercise.color}}\r\n                            >\r\n                                <div className=\"counter\">{counter}</div>\r\n                                <div className=\"breathing-particles-container\">\r\n                                    {Array(8).fill(0).map((_, i) => (\r\n                                        <div \r\n                                            key={i} \r\n                                            className={`breathing-particle ${phase.toLowerCase()}`}\r\n                                            style={{\r\n                                                animationDelay: `${i * 0.2}s`,\r\n                                                transform: `rotate(${i * 45}deg)`,\r\n                                                background: activeExercise.color\r\n                                            }}\r\n                                        ></div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"breath-status\">{phase}</div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    \r\n                    <div className=\"exercise-info\">\r\n                        {activeExercise.phases.map((p, index) => (\r\n                            <div \r\n                                key={index} \r\n                                className={`phase-instruction ${phase === p.name ? 'active' : ''}`}\r\n                                style={{\r\n                                    borderColor: phase === p.name ? activeExercise.color : 'transparent',\r\n                                    backgroundColor: phase === p.name ? `${activeExercise.color}15` : 'transparent'\r\n                                }}\r\n                            >\r\n                                <h4>{p.name} ({p.duration}s)</h4>\r\n                                <p>{p.instruction}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    \r\n                    <div className=\"progress-container\">\r\n                        <div className=\"progress-bar\">\r\n                            <div \r\n                                className=\"progress-fill\" \r\n                                style={{\r\n                                    width: `${progressPercentage}%`,\r\n                                    backgroundColor: activeExercise.color\r\n                                }}\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"progress-info\">\r\n                            <span>Cycle {cycles}/{activeExercise.totalCycles}</span>\r\n                            <span className=\"time-remaining\">\r\n                                {Math.floor((totalDuration - elapsedTime) / 60)}:\r\n                                {String(Math.floor((totalDuration - elapsedTime) % 60)).padStart(2, '0')} remaining\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <button \r\n                        onClick={stopExercise} \r\n                        className=\"stop-button\"\r\n                        style={{\r\n                            backgroundColor: activeExercise.color\r\n                        }}\r\n                    >\r\n                        Stop Exercise\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <p className=\"breathing-intro\">\r\n                        Breathing exercises can help reduce stress, improve focus, and promote relaxation.\r\n                        Select a category to find exercises for your specific needs.\r\n                    </p>\r\n                    \r\n                    <div className=\"category-filter\">\r\n                        {categories.map(category => (\r\n                            <button\r\n                                key={category.id}\r\n                                className={`category-button ${selectedCategory === category.id ? 'active' : ''}`}\r\n                                onClick={() => setSelectedCategory(category.id)}\r\n                            >\r\n                                {category.name}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                    \r\n                    <div className=\"exercises-list\">\r\n                        {filteredExercises.map(exercise => (\r\n                            <div key={exercise.id} className={`exercise-card theme-${currentTheme}`}>\r\n                                <div className=\"exercise-header\">\r\n                                    <div className=\"exercise-icon\" style={{backgroundColor: `${exercise.color}30`}}>\r\n                                        <span>{exercise.icon}</span>\r\n                                    </div>\r\n                                    <h3>{exercise.title}</h3>\r\n                                </div>\r\n                                \r\n                                <div className=\"exercise-meta\">\r\n                                    <span className=\"duration-tag\">\r\n                                        {exercise.phases.reduce((total, phase) => total + phase.duration, 0) * exercise.totalCycles} seconds\r\n                                    </span>\r\n                                    <span className=\"category-tag\" style={{backgroundColor: `${exercise.color}30`, color: exercise.color}}>\r\n                                        {categories.find(c => c.id === exercise.category)?.name.split(' ')[0]}\r\n                                    </span>\r\n                                </div>\r\n                                \r\n                                <p>{exercise.description}</p>\r\n                                \r\n                                <div className=\"exercise-benefits\">\r\n                                    <div className=\"benefit-title\">Benefits:</div>\r\n                                    <ul>\r\n                                        {exercise.benefits.slice(0, 2).map((benefit, idx) => (\r\n                                            <li key={idx}>{benefit}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                                \r\n                                <button \r\n                                    onClick={() => startExercise(exercise)} \r\n                                    className=\"start-button\"\r\n                                    style={{backgroundColor: exercise.color}}\r\n                                >\r\n                                    Start Exercise\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    \r\n                    <div className=\"breathing-footer\">\r\n                        <h3>Benefits of Regular Breathing Practice</h3>\r\n                        <div className=\"benefits-grid\">\r\n                            <div className=\"benefit-item\">\r\n                                <div className=\"benefit-icon\">🧠</div>\r\n                                <h4>Mental Clarity</h4>\r\n                                <p>Improves focus, concentration and mental performance</p>\r\n                            </div>\r\n                            <div className=\"benefit-item\">\r\n                                <div className=\"benefit-icon\">😌</div>\r\n                                <h4>Stress Reduction</h4>\r\n                                <p>Activates the parasympathetic nervous system to reduce stress</p>\r\n                            </div>\r\n                            <div className=\"benefit-item\">\r\n                                <div className=\"benefit-icon\">❤️</div>\r\n                                <h4>Heart Health</h4>\r\n                                <p>Lowers blood pressure and improves heart rate variability</p>\r\n                            </div>\r\n                            <div className=\"benefit-item\">\r\n                                <div className=\"benefit-icon\">💤</div>\r\n                                <h4>Better Sleep</h4>\r\n                                <p>Calms the mind and prepares the body for restful sleep</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"breathing-disclaimer\">\r\n                            <strong>Note:</strong> If you feel dizzy or uncomfortable during any exercise, stop and return to normal breathing.\r\n                            These exercises complement but do not replace professional medical care.\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BreathingExercises;","import React, { useState, useEffect } from 'react';\r\nimport './EmergencyContacts.css';\r\n\r\nconst EmergencyContacts = () => {\r\n    const [contacts, setContacts] = useState([]);\r\n    const [name, setName] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [editIndex, setEditIndex] = useState(null);\r\n    const [isAdding, setIsAdding] = useState(false);\r\n    const [formError, setFormError] = useState('');\r\n    const [showSuccess, setShowSuccess] = useState(false);\r\n\r\n    // Load contacts from localStorage on component mount\r\n    useEffect(() => {\r\n        const savedContacts = localStorage.getItem('emergencyContacts');\r\n        if (savedContacts) {\r\n            setContacts(JSON.parse(savedContacts));\r\n        }\r\n    }, []);\r\n\r\n    // Save contacts to localStorage whenever they change\r\n    useEffect(() => {\r\n        localStorage.setItem('emergencyContacts', JSON.stringify(contacts));\r\n    }, [contacts]);\r\n\r\n    const validatePhone = (phoneNumber) => {\r\n        // Basic phone validation - allows different formats including country codes\r\n        const regex = /^[+]?[(]?[0-9]{1,4}[)]?[-\\s.]?[0-9]{1,3}[-\\s.]?[0-9]{1,4}[-\\s.]?[0-9]{1,4}$/;\r\n        return regex.test(phoneNumber);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!name.trim()) {\r\n            setFormError('Please enter a contact name');\r\n            return;\r\n        }\r\n        \r\n        if (!phone.trim() || !validatePhone(phone)) {\r\n            setFormError('Please enter a valid phone number');\r\n            return;\r\n        }\r\n        \r\n        if (editIndex !== null) {\r\n            // Update existing contact\r\n            const updatedContacts = [...contacts];\r\n            updatedContacts[editIndex] = { name, phone };\r\n            setContacts(updatedContacts);\r\n            setEditIndex(null);\r\n        } else {\r\n            // Add new contact\r\n            setContacts([...contacts, { name, phone }]);\r\n        }\r\n        \r\n        // Reset form\r\n        setName('');\r\n        setPhone('');\r\n        setFormError('');\r\n        setIsAdding(false);\r\n        \r\n        // Show success message\r\n        setShowSuccess(true);\r\n        setTimeout(() => setShowSuccess(false), 3000);\r\n    };\r\n\r\n    const handleEdit = (index) => {\r\n        setName(contacts[index].name);\r\n        setPhone(contacts[index].phone);\r\n        setEditIndex(index);\r\n        setIsAdding(true);\r\n        setFormError('');\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setName('');\r\n        setPhone('');\r\n        setEditIndex(null);\r\n        setIsAdding(false);\r\n        setFormError('');\r\n    };\r\n\r\n    const removeContact = (index) => {\r\n        const newContacts = contacts.filter((_, i) => i !== index);\r\n        setContacts(newContacts);\r\n    };\r\n\r\n    const testCall = (phoneNumber) => {\r\n        window.location.href = `tel:${phoneNumber}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"emergency-contacts\">\r\n            <h2>\r\n                <span className=\"emergency-icon\">👥</span> Emergency Contacts\r\n            </h2>\r\n            \r\n            <div className=\"contacts-info\">\r\n                <p>Add people you trust who can be contacted in case of an emergency. \r\n                These contacts will receive an alert message when you use the SOS button.</p>\r\n            </div>\r\n\r\n            {showSuccess && (\r\n                <div className=\"success-message\">\r\n                    <span>✅ Contact {editIndex !== null ? 'updated' : 'added'} successfully!</span>\r\n                </div>\r\n            )}\r\n            \r\n            <div className=\"contacts-container\">\r\n                {contacts.length > 0 ? (\r\n                    <div className=\"contacts-list\">\r\n                        {contacts.map((contact, index) => (\r\n                            <div key={index} className=\"contact-card\">\r\n                                <div className=\"contact-info\">\r\n                                    <h3>{contact.name}</h3>\r\n                                    <p>{contact.phone}</p>\r\n                                </div>\r\n                                <div className=\"contact-actions\">\r\n                                    <button \r\n                                        className=\"test-call-btn\" \r\n                                        onClick={() => testCall(contact.phone)}\r\n                                        aria-label={`Call ${contact.name}`}\r\n                                    >\r\n                                        <span className=\"btn-icon\">📞</span>\r\n                                    </button>\r\n                                    <button \r\n                                        className=\"edit-contact-btn\" \r\n                                        onClick={() => handleEdit(index)}\r\n                                        aria-label={`Edit ${contact.name}`}\r\n                                    >\r\n                                        <span className=\"btn-icon\">✏️</span>\r\n                                    </button>\r\n                                    <button \r\n                                        className=\"remove-contact-btn\" \r\n                                        onClick={() => removeContact(index)}\r\n                                        aria-label={`Remove ${contact.name}`}\r\n                                    >\r\n                                        <span className=\"btn-icon\">❌</span>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"no-contacts\">\r\n                        <div className=\"no-contacts-icon\">👤</div>\r\n                        <p>No emergency contacts added yet</p>\r\n                        <p className=\"no-contacts-subtitle\">Add trusted people who can help during a crisis</p>\r\n                    </div>\r\n                )}\r\n\r\n                {!isAdding ? (\r\n                    <button className=\"add-contact-button\" onClick={() => setIsAdding(true)}>\r\n                        + Add Emergency Contact\r\n                    </button>\r\n                ) : (\r\n                    <div className=\"contact-form-container\">\r\n                        <h3>{editIndex !== null ? 'Edit Contact' : 'Add New Contact'}</h3>\r\n                        <form onSubmit={handleSubmit} className=\"contact-form\">\r\n                            {formError && <div className=\"form-error\">{formError}</div>}\r\n                            \r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"contact-name\">Name</label>\r\n                                <input\r\n                                    id=\"contact-name\"\r\n                                    type=\"text\"\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                    placeholder=\"Contact name\"\r\n                                />\r\n                            </div>\r\n                            \r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"contact-phone\">Phone Number</label>\r\n                                <input\r\n                                    id=\"contact-phone\"\r\n                                    type=\"tel\"\r\n                                    value={phone}\r\n                                    onChange={(e) => setPhone(e.target.value)}\r\n                                    placeholder=\"Phone number with country code\"\r\n                                />\r\n                                <small className=\"phone-format-hint\">Format: +1234567890 or 123-456-7890</small>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-actions\">\r\n                                <button type=\"submit\" className=\"save-contact-btn\">\r\n                                    {editIndex !== null ? 'Update Contact' : 'Save Contact'}\r\n                                </button>\r\n                                <button type=\"button\" className=\"cancel-btn\" onClick={handleCancel}>\r\n                                    Cancel\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            \r\n            <div className=\"sos-guide\">\r\n                <h3>How to Use SOS Feature</h3>\r\n                <div className=\"sos-steps\">\r\n                    <div className=\"sos-step\">\r\n                        <div className=\"step-number\">1</div>\r\n                        <p>Add your trusted emergency contacts above</p>\r\n                    </div>\r\n                    <div className=\"sos-step\">\r\n                        <div className=\"step-number\">2</div>\r\n                        <p>In a crisis, tap the SOS button in the app header</p>\r\n                    </div>\r\n                    <div className=\"sos-step\">\r\n                        <div className=\"step-number\">3</div>\r\n                        <p>Confirm to send emergency text messages to all your contacts</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sos-note\">\r\n                    <p>\r\n                        <strong>Note:</strong> The SOS feature will open your phone's messaging app \r\n                        with pre-written emergency texts. You'll need to manually send the messages.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmergencyContacts;","/**\r\n * Send SMS via device's native SMS functionality\r\n * @param {string} phoneNumber - Recipient's phone number\r\n * @param {string} message - Text message content\r\n * @returns {boolean} Whether the SMS link was opened\r\n */\r\nexport const sendSMS = (phoneNumber, message) => {\r\n    if (!phoneNumber || !message) {\r\n        console.error(\"Phone number and message are required to send SMS.\");\r\n        return false;\r\n    }\r\n\r\n    // Determine platform\r\n    const isIOS = /iPhone|iPad|iPod/.test(navigator.userAgent);\r\n    const isAndroid = /Android/.test(navigator.userAgent);\r\n    \r\n    try {\r\n        // URI encode the message\r\n        const encodedMessage = encodeURIComponent(message);\r\n        \r\n        // Create SMS link appropriate for the platform\r\n        let smsLink;\r\n        \r\n        if (isIOS) {\r\n            // iOS uses sms: protocol with & separator\r\n            smsLink = `sms:${phoneNumber}&body=${encodedMessage}`;\r\n        } else if (isAndroid) {\r\n            // Android uses smsto: or sms: protocol with ? separator\r\n            smsLink = `sms:${phoneNumber}?body=${encodedMessage}`;\r\n        } else {\r\n            // Default format for other platforms\r\n            smsLink = `sms:${phoneNumber}?body=${encodedMessage}`;\r\n        }\r\n        \r\n        // Log for debugging purposes\r\n        console.log(`Opening SMS link: ${smsLink}`);\r\n        \r\n        // Open the SMS link\r\n        window.location.href = smsLink;\r\n        \r\n        return true;\r\n    } catch (error) {\r\n        console.error(\"Error sending SMS:\", error);\r\n        return false;\r\n    }\r\n};\r\n\r\n/**\r\n * Make a phone call using the device's native call functionality\r\n * @param {string} phoneNumber - Phone number to call\r\n * @returns {boolean} Whether the call link was opened\r\n */\r\nexport const makePhoneCall = (phoneNumber) => {\r\n    if (!phoneNumber) {\r\n        console.error(\"Phone number is required to make a call.\");\r\n        return false;\r\n    }\r\n    \r\n    try {\r\n        // Create tel: URI\r\n        const callLink = `tel:${phoneNumber}`;\r\n        \r\n        // Open the call link\r\n        window.location.href = callLink;\r\n        \r\n        return true;\r\n    } catch (error) {\r\n        console.error(\"Error making phone call:\", error);\r\n        return false;\r\n    }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { sendSMS } from '../services/smsService';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './SOSButton.css';\r\n\r\nconst SOSButton = ({ className }) => {\r\n    const [showConfirm, setShowConfirm] = useState(false);\r\n    const [sending, setSending] = useState(false);\r\n    const [sent, setSent] = useState(false);\r\n    const [hasContacts, setHasContacts] = useState(false);\r\n    const history = useHistory();\r\n    \r\n    // Check if emergency contacts exist\r\n    useEffect(() => {\r\n        const checkContacts = () => {\r\n            const storedContacts = localStorage.getItem('emergencyContacts');\r\n            const contacts = storedContacts ? JSON.parse(storedContacts) : [];\r\n            setHasContacts(contacts.length > 0);\r\n        };\r\n        \r\n        // Check on mount and whenever localStorage might change\r\n        checkContacts();\r\n        \r\n        // Setup storage event listener to detect changes in other tabs\r\n        const handleStorageChange = (e) => {\r\n            if (e.key === 'emergencyContacts') {\r\n                checkContacts();\r\n            }\r\n        };\r\n        \r\n        window.addEventListener('storage', handleStorageChange);\r\n        \r\n        return () => {\r\n            window.removeEventListener('storage', handleStorageChange);\r\n        };\r\n    }, []);\r\n\r\n    const handleSOSClick = () => {\r\n        // If no contacts, prompt to add them\r\n        if (!hasContacts) {\r\n            history.push('/emergency-contacts');\r\n            return;\r\n        }\r\n        \r\n        setShowConfirm(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setShowConfirm(false);\r\n    };\r\n\r\n    const handleConfirmSOS = () => {\r\n        setSending(true);\r\n        \r\n        // Get contacts from local storage\r\n        const storedContacts = localStorage.getItem('emergencyContacts');\r\n        const contacts = storedContacts ? JSON.parse(storedContacts) : [];\r\n        \r\n        // Prepare emergency message\r\n        const userLocation = 'unknown location'; // Could be enhanced with geolocation\r\n        const timestamp = new Date().toLocaleString();\r\n        \r\n        const message = `EMERGENCY SOS - I need help right now at ${userLocation}. This message was sent from my MindMatters app at ${timestamp}. Please try to contact me or emergency services if you can't reach me.`;\r\n        \r\n        // Create a small delay between each SMS to avoid freezing the UI\r\n        setTimeout(() => {\r\n            // Send the SMS to each contact\r\n            if (contacts.length > 0) {\r\n                // SMS strategy depends on the platform\r\n                if (/iPhone|iPad|iPod/.test(navigator.userAgent)) {\r\n                    // For iOS, we need to do a single SMS with multiple recipients\r\n                    const recipients = contacts.map(contact => contact.phone).join(',');\r\n                    sendSMS(recipients, message);\r\n                } else {\r\n                    // For Android and other platforms, send individual SMS\r\n                    contacts.forEach((contact, index) => {\r\n                        setTimeout(() => {\r\n                            try {\r\n                                sendSMS(contact.phone, message);\r\n                            } catch (error) {\r\n                                console.error(`Failed to send SOS to ${contact.name}:`, error);\r\n                            }\r\n                        }, index * 300); // Small delay between each SMS\r\n                    });\r\n                }\r\n            }\r\n            \r\n            // Update UI state\r\n            setSending(false);\r\n            setSent(true);\r\n            \r\n            // Reset after showing success message\r\n            setTimeout(() => {\r\n                setShowConfirm(false);\r\n                setSent(false);\r\n            }, 3000);\r\n        }, 800);\r\n    };\r\n\r\n    return (\r\n        <div className={`sos-container ${className || ''}`}>\r\n            <button \r\n                onClick={handleSOSClick} \r\n                className={`sos-button ${!hasContacts ? 'sos-add' : ''}`}\r\n                title={hasContacts ? \"Send emergency SOS\" : \"Add emergency contacts first\"}\r\n            >\r\n                {hasContacts ? 'SOS' : '+ SOS'}\r\n            </button>\r\n            \r\n            {showConfirm && (\r\n                <div className=\"sos-confirm\">\r\n                    {!sending && !sent ? (\r\n                        <>\r\n                            <div className=\"sos-confirm-header\">\r\n                                <span className=\"sos-alert-icon\">⚠️</span>\r\n                                <h3>Send Emergency Alert?</h3>\r\n                            </div>\r\n                            <p>This will prepare SMS messages to your emergency contacts asking for immediate help.</p>\r\n                            <div className=\"sos-confirm-buttons\">\r\n                                <button onClick={handleConfirmSOS} className=\"confirm-button\">\r\n                                    Yes, Send Alert\r\n                                </button>\r\n                                <button onClick={handleCancel} className=\"cancel-button\">\r\n                                    Cancel\r\n                                </button>\r\n                            </div>\r\n                        </>\r\n                    ) : sending ? (\r\n                        <div className=\"sos-sending\">\r\n                            <div className=\"sending-spinner\"></div>\r\n                            <p>Preparing emergency messages...</p>\r\n                        </div>\r\n                    ) : sent ? (\r\n                        <div className=\"sos-sent\">\r\n                            <div className=\"sent-icon\">✓</div>\r\n                            <p>Messages ready to send!</p>\r\n                            <small className=\"sent-note\">Please confirm each message in your messaging app</small>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SOSButton;","/**\r\n * Service to fetch inspirational quotes\r\n */\r\n\r\n// Fallback quotes to use when offline or API fails\r\nconst fallbackQuotes = [\r\n  {\r\n    quote: \"The mind is everything. What you think you become.\",\r\n    author: \"Buddha\"\r\n  },\r\n  {\r\n    quote: \"Your task is not to seek love, but merely to seek and find all the barriers within yourself that you have built against it.\",\r\n    author: \"Rumi\"\r\n  },\r\n  {\r\n    quote: \"Happiness is not something ready-made. It comes from your own actions.\",\r\n    author: \"Dalai Lama\"\r\n  },\r\n  {\r\n    quote: \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\r\n    author: \"Nelson Mandela\"\r\n  },\r\n  {\r\n    quote: \"In the midst of winter, I found there was, within me, an invincible summer.\",\r\n    author: \"Albert Camus\"\r\n  },\r\n  {\r\n    quote: \"It is during our darkest moments that we must focus to see the light.\",\r\n    author: \"Aristotle\"\r\n  },\r\n  {\r\n    quote: \"You are never too old to set another goal or to dream a new dream.\",\r\n    author: \"C.S. Lewis\"\r\n  },\r\n  {\r\n    quote: \"Peace begins with a smile.\",\r\n    author: \"Mother Teresa\"\r\n  },\r\n  {\r\n    quote: \"The future depends on what you do today.\",\r\n    author: \"Mahatma Gandhi\"\r\n  },\r\n  {\r\n    quote: \"What you get by achieving your goals is not as important as what you become by achieving your goals.\",\r\n    author: \"Zig Ziglar\"\r\n  },\r\n  {\r\n    quote: \"When we are no longer able to change a situation, we are challenged to change ourselves.\",\r\n    author: \"Viktor Frankl\"\r\n  },\r\n  {\r\n    quote: \"Live in the sunshine, swim the sea, drink the wild air.\",\r\n    author: \"Ralph Waldo Emerson\"\r\n  }\r\n];\r\n\r\n/**\r\n * Fetch a daily inspirational quote\r\n * @param {boolean} forceRefresh - Whether to bypass cache and fetch a new quote\r\n * @returns {Promise<Object>} Quote object with author and text\r\n */\r\nexport const fetchDailyQuote = async (forceRefresh = false) => {\r\n  // Check if we have a cached quote and it's still valid for today\r\n  const today = new Date().toDateString();\r\n  const cachedData = localStorage.getItem('dailyQuote');\r\n\r\n  if (!forceRefresh && cachedData) {\r\n    try {\r\n      const cached = JSON.parse(cachedData);\r\n      const cacheDate = localStorage.getItem('quoteDate');\r\n      \r\n      if (cacheDate === today) {\r\n        console.log('Using cached quote for today');\r\n        return {\r\n          ...cached,\r\n          success: true,\r\n          source: 'cache'\r\n        };\r\n      }\r\n    } catch (e) {\r\n      console.error('Error reading cached quote', e);\r\n    }\r\n  }\r\n\r\n  // Try multiple APIs to ensure we get a quote\r\n  const apis = [\r\n    { \r\n      name: 'quotable',\r\n      url: 'https://api.quotable.kurokeita.dev/api/quotes/random',\r\n      parser: (data) => ({ \r\n        quote: data.quote.content, \r\n        author: data.quote.author.name,\r\n        tags: data.quote.tags.map(tag => tag.name).join(', '),\r\n        authorBio: data.quote.author.bio || ''\r\n      })\r\n    },\r\n    { \r\n      name: 'zenquotes',\r\n      url: 'https://api.zenquotes.io/v1/random',\r\n      parser: (data) => ({ \r\n        quote: data[0].q, \r\n        author: data[0].a \r\n      })\r\n    },\r\n    { \r\n      name: 'quotable-legacy',\r\n      url: 'https://api.quotable.io/random',\r\n      parser: (data) => ({ \r\n        quote: data.content, \r\n        author: data.author \r\n      })\r\n    },\r\n    { \r\n      name: 'type.fit',\r\n      url: 'https://type.fit/api/quotes',\r\n      parser: (data) => {\r\n        const randomQuote = data[Math.floor(Math.random() * data.length)];\r\n        return { \r\n          quote: randomQuote.text, \r\n          author: randomQuote.author || \"Unknown\" \r\n        };\r\n      }\r\n    },\r\n    {\r\n      name: 'quoteGarden',\r\n      url: 'https://quote-garden.onrender.com/api/v3/quotes/random',\r\n      parser: (data) => ({\r\n        quote: data.data[0].quoteText,\r\n        author: data.data[0].quoteAuthor\r\n      })\r\n    }\r\n  ];\r\n\r\n  // Try each API in sequence until one works\r\n  for (const api of apis) {\r\n    try {\r\n      // First check if we're online before attempting to fetch\r\n      if (!navigator.onLine) {\r\n        throw new Error('You are offline');\r\n      }\r\n      \r\n      console.log(`Trying to fetch quote from ${api.name}...`);\r\n      const response = await fetch(api.url, { \r\n        signal: AbortSignal.timeout(5000)  // 5 second timeout\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed with status ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      const quoteData = api.parser(data);\r\n      \r\n      if (quoteData.quote && quoteData.author) {\r\n        // Cache the successful result\r\n        localStorage.setItem('dailyQuote', JSON.stringify(quoteData));\r\n        localStorage.setItem('quoteDate', today);\r\n        \r\n        console.log(`Successfully fetched quote from ${api.name}`);\r\n        \r\n        return {\r\n          ...quoteData,\r\n          success: true,\r\n          source: api.name\r\n        };\r\n      }\r\n      \r\n      throw new Error('Invalid quote data format');\r\n    } catch (error) {\r\n      console.warn(`Failed to fetch from ${api.name}:`, error);\r\n      // Continue to next API\r\n    }\r\n  }\r\n  \r\n  // If all APIs fail, use a random fallback quote\r\n  console.log('All APIs failed, using fallback quote');\r\n  const randomIndex = Math.floor(Math.random() * fallbackQuotes.length);\r\n  const fallbackQuote = fallbackQuotes[randomIndex];\r\n  \r\n  return {\r\n    ...fallbackQuote,\r\n    success: false,\r\n    source: 'fallback',\r\n    error: 'Could not connect to quote services'\r\n  };\r\n};\r\n\r\n/**\r\n * Get a random quote from the fallback collection\r\n * @returns {Object} Quote object\r\n */\r\nexport const getRandomFallbackQuote = () => {\r\n  const randomIndex = Math.floor(Math.random() * fallbackQuotes.length);\r\n  return fallbackQuotes[randomIndex];\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyQuote } from '../services/quoteService';\r\nimport './DailyQuote.css';\r\n\r\nconst DailyQuote = () => {\r\n  const [quote, setQuote] = useState({\r\n    quote: \"\",\r\n    author: \"\",\r\n    tags: \"\",\r\n    authorBio: \"\",\r\n    loading: true,\r\n    error: false,\r\n    source: null\r\n  });\r\n  \r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const [showCopied, setShowCopied] = useState(false);\r\n  const [showAuthorInfo, setShowAuthorInfo] = useState(false);\r\n\r\n  // Monitor online status\r\n  useEffect(() => {\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n    \r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n    \r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  const getQuote = async (forceRefresh = false) => {\r\n    if (refreshing) return;\r\n    \r\n    setRefreshing(true);\r\n    setQuote(prev => ({ ...prev, loading: true }));\r\n    \r\n    try {\r\n      const quoteData = await fetchDailyQuote(forceRefresh);\r\n      setQuote({\r\n        quote: quoteData.quote,\r\n        author: quoteData.author,\r\n        tags: quoteData.tags || \"\",\r\n        authorBio: quoteData.authorBio || \"\",\r\n        loading: false,\r\n        error: !quoteData.success,\r\n        source: quoteData.source\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching quote:\", error);\r\n      setQuote({\r\n        quote: \"Take a deep breath and try again.\",\r\n        author: \"MindMatters\",\r\n        tags: \"\",\r\n        authorBio: \"\",\r\n        loading: false,\r\n        error: true,\r\n        source: 'error'\r\n      });\r\n    } finally {\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // Check if we have a stored quote for today\r\n    const storedQuote = localStorage.getItem('dailyQuote');\r\n    const storedDate = localStorage.getItem('quoteDate');\r\n    const today = new Date().toDateString();\r\n    \r\n    if (storedQuote && storedDate === today) {\r\n      try {\r\n        const parsedQuote = JSON.parse(storedQuote);\r\n        setQuote({\r\n          ...parsedQuote,\r\n          loading: false,\r\n          source: 'cache'\r\n        });\r\n      } catch (e) {\r\n        getQuote();\r\n      }\r\n    } else {\r\n      getQuote();\r\n    }\r\n  }, []);\r\n  \r\n  // Store the quote when we get a new one\r\n  useEffect(() => {\r\n    if (!quote.loading && quote.quote) {\r\n      localStorage.setItem('dailyQuote', JSON.stringify({\r\n        quote: quote.quote,\r\n        author: quote.author,\r\n        tags: quote.tags,\r\n        authorBio: quote.authorBio\r\n      }));\r\n      localStorage.setItem('quoteDate', new Date().toDateString());\r\n    }\r\n  }, [quote]);\r\n\r\n  const copyQuote = () => {\r\n    const textToCopy = `\"${quote.quote}\" — ${quote.author}`;\r\n    navigator.clipboard.writeText(textToCopy)\r\n      .then(() => {\r\n        setShowCopied(true);\r\n        setTimeout(() => setShowCopied(false), 2000);\r\n      })\r\n      .catch(err => console.error('Failed to copy: ', err));\r\n  };\r\n\r\n  const toggleAuthorInfo = () => {\r\n    setShowAuthorInfo(!showAuthorInfo);\r\n  };\r\n\r\n  return (\r\n    <div className=\"daily-quote\">\r\n      <h2>\r\n        🧠 Daily Inspiration\r\n        {!isOnline && <span className=\"offline-indicator\">Offline Mode</span>}\r\n      </h2>\r\n      \r\n      <div className={`quote-content ${quote.loading ? 'loading' : ''}`}>\r\n        {quote.loading ? (\r\n          <div className=\"quote-loading\">\r\n            <div className=\"quote-spinner\"></div>\r\n            <p>Finding inspiration...</p>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <blockquote>\r\n              <p>\"{quote.quote}\"</p>\r\n              <footer>\r\n                <span \r\n                  className={`author-name ${quote.authorBio ? 'has-bio' : ''}`}\r\n                  onClick={quote.authorBio ? toggleAuthorInfo : undefined}\r\n                >\r\n                  — {quote.author}\r\n                  {quote.authorBio && <span className=\"info-icon\">ℹ️</span>}\r\n                </span>\r\n                {quote.source === 'fallback' && <span className=\"offline-quote\">(offline quote)</span>}\r\n              </footer>\r\n              \r\n              {quote.tags && (\r\n                <div className=\"quote-tags\">\r\n                  {quote.tags.split(', ').map(tag => (\r\n                    <span key={tag} className=\"quote-tag\">{tag}</span>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              \r\n              {showAuthorInfo && quote.authorBio && (\r\n                <div className=\"author-bio\">\r\n                  <h4>{quote.author}</h4>\r\n                  <p>{quote.authorBio}</p>\r\n                </div>\r\n              )}\r\n            </blockquote>\r\n            \r\n            <div className=\"quote-actions\">\r\n              <button \r\n                onClick={() => getQuote(true)} \r\n                className=\"refresh-quote\" \r\n                disabled={refreshing || !isOnline}\r\n                aria-label=\"Get a new quote\"\r\n              >\r\n                <span className={`refresh-icon ${refreshing ? 'spinning' : ''}`}>↻</span>\r\n                <span className=\"refresh-text\">{refreshing ? 'Loading...' : 'New Quote'}</span>\r\n              </button>\r\n              \r\n              <button \r\n                onClick={copyQuote} \r\n                className=\"copy-quote\"\r\n                aria-label=\"Copy quote to clipboard\"\r\n              >\r\n                <span className=\"copy-icon\">📋</span>\r\n                <span className=\"copy-text\">{showCopied ? 'Copied!' : 'Copy'}</span>\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyQuote;","import React, { useState, useEffect } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { getMoodEntries } from '../services/storageService';\r\nimport { fetchCurrentWeather, getWeatherIcon, getWeatherDescription, analyzeWeatherMoodPatterns } from '../services/weatherService';\r\nimport './WeatherMood.css';\r\n\r\n// Register Chart.js components\r\nChart.register(...registerables);\r\n\r\nconst WeatherMood = () => {\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [analysis, setAnalysis] = useState(null);\r\n  const [moodEntries, setMoodEntries] = useState([]);\r\n  const [chartType, setChartType] = useState('bar'); // 'bar' or 'radar'\r\n\r\n  // Fetch initial data on component mount\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Get user's location and weather\r\n        const location = await getUserLocation();\r\n        const weatherData = await fetchCurrentWeather(location.latitude, location.longitude);\r\n        setCurrentWeather(weatherData);\r\n        \r\n        // Get mood entries for analysis\r\n        const entries = await getMoodEntries();\r\n        setMoodEntries(entries);\r\n        \r\n        // Analyze weather effects on mood\r\n        const weatherAnalysis = analyzeWeatherMoodPatterns(entries, weatherData);\r\n        setAnalysis(weatherAnalysis);\r\n      } catch (err) {\r\n        console.error('Failed to load weather or mood data:', err);\r\n        setError('Could not load weather or mood data. Please check your internet connection and try again.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n\r\n  // Helper function to get user location\r\n  const getUserLocation = () => {\r\n    return new Promise((resolve) => {\r\n      // Default coordinates if geolocation fails\r\n      const defaultLocation = { latitude: 40.7128, longitude: -74.0060 };\r\n      \r\n      if (!navigator.geolocation) {\r\n        resolve(defaultLocation);\r\n        return;\r\n      }\r\n\r\n      const timeout = setTimeout(() => {\r\n        resolve(defaultLocation);\r\n      }, 5000);\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          clearTimeout(timeout);\r\n          resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n          });\r\n        },\r\n        () => {\r\n          clearTimeout(timeout);\r\n          resolve(defaultLocation);\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  // Prepare chart data for weather-mood correlation\r\n  const getChartData = () => {\r\n    if (!analysis || !analysis.hasEnoughData) return null;\r\n    \r\n    const weatherTypes = Object.keys(analysis.weatherMoodGroups).filter(\r\n      type => analysis.weatherMoodGroups[type].entries.length > 0\r\n    );\r\n    \r\n    // Get custom colors for each weather type\r\n    const getWeatherColors = (weatherType, alpha = 0.7) => {\r\n      const colors = {\r\n        sunny: `rgba(255, 194, 14, ${alpha})`,  // Bright yellow\r\n        cloudy: `rgba(164, 175, 196, ${alpha})`, // Blue-gray\r\n        rainy: `rgba(86, 141, 198, ${alpha})`,   // Blue\r\n        snowy: `rgba(219, 234, 254, ${alpha})`   // Light blue\r\n      };\r\n      \r\n      return colors[weatherType] || `rgba(150, 150, 150, ${alpha})`;\r\n    };\r\n    \r\n    return {\r\n      labels: weatherTypes.map(type => type.charAt(0).toUpperCase() + type.slice(1)),\r\n      datasets: [\r\n        {\r\n          label: 'Average Mood (1-10)',\r\n          data: weatherTypes.map(type => analysis.weatherMoodGroups[type].avgMood),\r\n          backgroundColor: weatherTypes.map(type => getWeatherColors(type)),\r\n          borderColor: weatherTypes.map(type => getWeatherColors(type, 1)),\r\n          borderWidth: 1,\r\n          borderRadius: 6,\r\n          hoverBackgroundColor: weatherTypes.map(type => getWeatherColors(type, 0.9)),\r\n        }\r\n      ]\r\n    };\r\n  };\r\n  \r\n  // Chart options\r\n  const getChartOptions = () => {\r\n    const baseOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n          titleColor: '#333',\r\n          bodyColor: '#555',\r\n          borderColor: '#ddd',\r\n          borderWidth: 1,\r\n          padding: 10,\r\n          displayColors: false,\r\n          callbacks: {\r\n            title: function(context) {\r\n              return `${context[0].label} Weather`;\r\n            },\r\n            label: function(context) {\r\n              return `Average Mood: ${context.parsed.y.toFixed(1)}/10`;\r\n            },\r\n            afterLabel: function(context) {\r\n              const index = context.dataIndex;\r\n              const weatherType = Object.keys(analysis.weatherMoodGroups)[index];\r\n              const count = analysis.weatherMoodGroups[weatherType].count || 0;\r\n              return `Based on ${count} entries`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Specific options for bar chart\r\n    if (chartType === 'bar') {\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: false,\r\n            min: 1,\r\n            max: 10,\r\n            ticks: {\r\n              stepSize: 1,\r\n              color: '#666'\r\n            },\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.05)'\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Mood Level',\r\n              color: '#555',\r\n              font: {\r\n                weight: 'bold'\r\n              }\r\n            }\r\n          },\r\n          x: {\r\n            grid: {\r\n              display: false\r\n            },\r\n            ticks: {\r\n              color: '#666'\r\n            }\r\n          }\r\n        },\r\n        animation: {\r\n          duration: 2000,\r\n          easing: 'easeOutQuart'\r\n        }\r\n      };\r\n    }\r\n    \r\n    // Specific options for radar chart\r\n    return {\r\n      ...baseOptions,\r\n      scales: {\r\n        r: {\r\n          min: 1,\r\n          max: 10,\r\n          ticks: {\r\n            stepSize: 1,\r\n            color: '#666',\r\n            backdropColor: 'transparent'\r\n          },\r\n          angleLines: {\r\n            color: 'rgba(0, 0, 0, 0.1)'\r\n          },\r\n          grid: {\r\n            color: 'rgba(0, 0, 0, 0.1)'\r\n          },\r\n          pointLabels: {\r\n            color: '#333',\r\n            font: {\r\n              size: 12\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  // Format current temperature\r\n  const formatTemperature = (temp) => {\r\n    return `${Math.round(temp)}°C`;\r\n  };\r\n\r\n  // Calculate time since weather was last fetched\r\n  const getWeatherTimeAgo = () => {\r\n    if (!currentWeather || !currentWeather.timestamp) return '';\r\n    \r\n    const now = Date.now();\r\n    const timestamp = currentWeather.timestamp;\r\n    const diff = now - timestamp;\r\n    \r\n    // Convert to minutes\r\n    const minutes = Math.floor(diff / 60000);\r\n    \r\n    if (minutes < 1) return 'just now';\r\n    if (minutes === 1) return '1 minute ago';\r\n    if (minutes < 60) return `${minutes} minutes ago`;\r\n    \r\n    // Convert to hours\r\n    const hours = Math.floor(minutes / 60);\r\n    if (hours === 1) return '1 hour ago';\r\n    if (hours < 24) return `${hours} hours ago`;\r\n    \r\n    // Convert to days\r\n    const days = Math.floor(hours / 24);\r\n    if (days === 1) return 'yesterday';\r\n    return `${days} days ago`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-mood\">\r\n      <h2>Weather & Mood Insights</h2>\r\n      \r\n      {loading ? (\r\n        <div className=\"weather-loading\">\r\n          <div className=\"weather-spinner\"></div>\r\n          <p>Loading weather data and analyzing your mood patterns...</p>\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"weather-error\">\r\n          <p>{error}</p>\r\n          <button onClick={() => window.location.reload()} className=\"reload-button\">\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {currentWeather && currentWeather.current && (\r\n            <div className=\"current-weather\">\r\n              <div className=\"weather-icon-large\">\r\n                {getWeatherIcon(currentWeather.current.weather_code, currentWeather.current.is_day)}\r\n              </div>\r\n              <div className=\"weather-details\">\r\n                <h3>Current Weather</h3>\r\n                <div className=\"weather-temp\">\r\n                  {formatTemperature(currentWeather.current.temperature_2m)}\r\n                </div>\r\n                <div className=\"weather-desc\">\r\n                  {getWeatherDescription(currentWeather.current.weather_code)}\r\n                </div>\r\n                <div className=\"weather-meta\">\r\n                  <span>Feels like {formatTemperature(currentWeather.current.apparent_temperature)}</span>\r\n                  <span>• Humidity: {currentWeather.current.relative_humidity_2m}%</span>\r\n                  <span className=\"cached-indicator\">Updated {getWeatherTimeAgo()}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"mood-weather-analysis\">\r\n            <h3>How Weather Affects Your Mood</h3>\r\n            \r\n            {!analysis || !analysis.hasEnoughData ? (\r\n              <div className=\"no-data-message\">\r\n                <p>{analysis?.message || \"Not enough data to analyze weather effects on your mood yet.\"}</p>\r\n                <p>Keep logging your daily entries to see patterns emerge!</p>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <div className=\"chart-type-toggle\">\r\n                  <button \r\n                    className={`chart-type-btn ${chartType === 'bar' ? 'active' : ''}`}\r\n                    onClick={() => setChartType('bar')}\r\n                  >\r\n                    Bar Chart\r\n                  </button>\r\n                  <button \r\n                    className={`chart-type-btn ${chartType === 'radar' ? 'active' : ''}`}\r\n                    onClick={() => setChartType('radar')}\r\n                  >\r\n                    Radar Chart\r\n                  </button>\r\n                </div>\r\n              \r\n                <div className=\"chart-container\">\r\n                  {chartType === 'bar' ? (\r\n                    <Bar data={getChartData()} options={getChartOptions()} />\r\n                  ) : (\r\n                    <Chart type=\"radar\" data={getChartData()} options={getChartOptions()} />\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"insights-container\">\r\n                  <h4>Insights</h4>\r\n                  <ul className=\"insights-list\">\r\n                    {analysis.insights.map((insight, index) => (\r\n                      <li \r\n                        key={index} \r\n                        className={`insight-item insight-${insight.type}`}\r\n                      >\r\n                        {insight.text}\r\n                      </li>\r\n                    ))}\r\n                    \r\n                    {analysis.insights.length === 0 && (\r\n                      <li className=\"insight-item insight-neutral\">\r\n                        Weather doesn't appear to have a strong effect on your mood based on current data.\r\n                      </li>\r\n                    )}\r\n                  </ul>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"weather-tips\">\r\n            <h4>Weather Wellness Tips</h4>\r\n            {currentWeather && currentWeather.current && (\r\n              <div className=\"tips-container\">\r\n                {currentWeather.current.weather_code <= 1 && (\r\n                  <p>☀️ <strong>Sunny day tip:</strong> Sunshine boosts vitamin D production, which can improve mood. Consider spending 15-20 minutes outside.</p>\r\n                )}\r\n                \r\n                {currentWeather.current.weather_code >= 2 && currentWeather.current.weather_code <= 3 && (\r\n                  <p>☁️ <strong>Cloudy day tip:</strong> Cloudy days can sometimes affect mood. Try brightening your environment with good lighting.</p>\r\n                )}\r\n                \r\n                {currentWeather.current.weather_code >= 51 && currentWeather.current.weather_code <= 67 && (\r\n                  <p>🌧️ <strong>Rainy day tip:</strong> The sound of rain can be calming. Consider mindful listening or using the day for cozy indoor activities.</p>\r\n                )}\r\n                \r\n                {currentWeather.current.weather_code >= 71 && currentWeather.current.weather_code <= 86 && (\r\n                  <p>❄️ <strong>Snowy day tip:</strong> Cold weather can make us less active. Try to maintain physical movement indoors.</p>\r\n                )}\r\n                \r\n                {currentWeather.current.weather_code >= 95 && (\r\n                  <p>⛈️ <strong>Stormy day tip:</strong> Storms can trigger anxiety in some people. Practice deep breathing exercises if you feel anxious.</p>\r\n                )}\r\n                \r\n                <p className=\"general-tip\">\r\n                  Being aware of how weather affects your mood can help you prepare and adapt your self-care routines.\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherMood;","/**\r\n * Service to detect user's location using ipapi.co\r\n */\r\n\r\n// Cache the location data\r\nlet cachedLocationData = null;\r\nlet cacheTTL = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\r\nlet cacheTimestamp = 0;\r\n\r\n/**\r\n * Get the user's country based on IP address\r\n * @returns {Promise<Object>} Promise resolving to country info\r\n */\r\nexport const getUserCountry = async () => {\r\n  // Return cached data if it's still valid\r\n  if (cachedLocationData && (Date.now() - cacheTimestamp) < cacheTTL) {\r\n    return cachedLocationData;\r\n  }\r\n\r\n  try {\r\n    // Check if we're offline\r\n    if (!navigator.onLine) {\r\n      // Try to get from local storage\r\n      const storedLocation = localStorage.getItem('userCountry');\r\n      if (storedLocation) {\r\n        return JSON.parse(storedLocation);\r\n      }\r\n      throw new Error('Offline and no cached location data');\r\n    }\r\n\r\n    // Fetch from ipapi.co\r\n    const response = await fetch('https://ipapi.co/json/', {\r\n      signal: AbortSignal.timeout(5000) // 5 second timeout\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Geolocation API error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Store in cache and localStorage\r\n    cachedLocationData = {\r\n      country: data.country_name,\r\n      countryCode: data.country_code,\r\n      city: data.city,\r\n      region: data.region,\r\n      source: 'api'\r\n    };\r\n    \r\n    cacheTimestamp = Date.now();\r\n    localStorage.setItem('userCountry', JSON.stringify(cachedLocationData));\r\n    \r\n    return cachedLocationData;\r\n  } catch (error) {\r\n    console.error('Failed to detect country:', error);\r\n    \r\n    // Return default if we can't get location\r\n    return {\r\n      country: 'United States',\r\n      countryCode: 'US',\r\n      source: 'default'\r\n    };\r\n  }\r\n};","/**\r\n * Crisis hotlines data by country\r\n * Source: Compiled from Wikipedia and various national mental health resources\r\n */\r\n\r\nconst crisisHotlines = [\r\n  {\r\n    country: \"Algeria\",\r\n    countryCode: \"DZ\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Police\",\r\n        phone: \"17\",\r\n        description: \"National police emergency number in Algeria\"\r\n      },\r\n      {\r\n        name: \"National Ambulance\",\r\n        phone: \"43\",\r\n        description: \"National ambulance emergency number in Algeria\"\r\n      },\r\n      {\r\n        name: \"Fire Brigade\",\r\n        phone: \"14\",\r\n        description: \"National fire brigade number in Algeria\"\r\n      },\r\n      {\r\n        name: \"National Gendarmerie\",\r\n        phone: \"1055\",\r\n        description: \"National gendarmerie number in Algeria\"\r\n      },\r\n      {\r\n        name: \"Suicide Hotline Algeria\",\r\n        phone: \"0021 3983 2000 58\",\r\n        description: \"Crisis support service in Algeria\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Argentina\",\r\n    countryCode: \"AR\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"911\",\r\n        description: \"National emergency number in Argentina\"\r\n      },\r\n      {\r\n        name: \"Centro de Asistencia al Suicida\",\r\n        phone: \"135\",\r\n        altPhone: \"5275-1135\",\r\n        description: \"Crisis support for Greater Buenos Aires and rest of the country\",\r\n        website: \"https://www.asistencialsuicida.org.ar/\"\r\n      },\r\n      {\r\n        name: \"SOS Un Amigo Anonimo\",\r\n        phone: \"5263-0583\",\r\n        description: \"Available Monday to Friday from 10am to 7pm and Saturdays from 10am to 4pm\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Armenia\",\r\n    countryCode: \"AM\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"112\",\r\n        altPhone: \"911\",\r\n        description: \"National emergency numbers in Armenia\"\r\n      },\r\n      {\r\n        name: \"Trust Social Work and Sociological Research Centre\",\r\n        phone: \"(2) 538194\",\r\n        altPhone: \"(2) 538197\",\r\n        description: \"Crisis support service in Armenia\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Australia\",\r\n    countryCode: \"AU\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"000\",\r\n        altPhone: \"112\",\r\n        description: \"National emergency numbers in Australia\"\r\n      },\r\n      {\r\n        name: \"Lifeline\",\r\n        phone: \"13 11 14\",\r\n        description: \"24-hour nationwide service for crisis support, suicide prevention and mental health support\",\r\n        website: \"https://www.lifeline.org.au/\"\r\n      },\r\n      {\r\n        name: \"Kids Helpline\",\r\n        phone: \"1800 55 1800\",\r\n        description: \"24-hour support for Australians aged 5-25\",\r\n        website: \"https://kidshelpphone.ca/\"\r\n      },\r\n      {\r\n        name: \"Beyond Blue\",\r\n        phone: \"1300 224 636\",\r\n        description: \"24/7 information and support for anxiety, depression, and suicide\",\r\n        website: \"https://www.beyondblue.org.au/\"\r\n      },\r\n      {\r\n        name: \"Suicide Call Back Service\",\r\n        phone: \"1300 659 467\",\r\n        description: \"Professional 24/7 telephone and online counselling\",\r\n        website: \"https://www.suicidecallbackservice.org.au/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Austria\",\r\n    countryCode: \"AT\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"112\",\r\n        description: \"National emergency number in Austria\"\r\n      },\r\n      {\r\n        name: \"Telefonseelsorge\",\r\n        phone: \"142\",\r\n        description: \"Free of charge emotional support, operating 24 hours a day\",\r\n        website: \"https://www.telefonseelsorge.at/\"\r\n      },\r\n      {\r\n        name: \"Rat auf Draht\",\r\n        phone: \"147\",\r\n        description: \"Crisis support for children, juveniles and their attachment figures, 24/7\",\r\n        website: \"https://www.rataufdraht.at/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Bangladesh\",\r\n    countryCode: \"BD\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"999\",\r\n        description: \"National emergency number in Bangladesh\"\r\n      },\r\n      {\r\n        name: \"Kaan Pete Roi\",\r\n        phone: \"+88 09612 119911\",\r\n        description: \"Emotional support helpline for people with feelings of despair, isolation, distress or suicidal feelings\",\r\n        website: \"https://shuni.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Brazil\",\r\n    countryCode: \"BR\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"190\",\r\n        description: \"National emergency number in Brazil\"\r\n      },\r\n      {\r\n        name: \"National Suicide Hotline\",\r\n        phone: \"188\",\r\n        description: \"National suicide prevention hotline in Brazil\"\r\n      },\r\n      {\r\n        name: \"Centro de Valorização da Vida\",\r\n        phone: \"188\",\r\n        description: \"Emotional and suicidal prevention support, 24/7\",\r\n        website: \"https://www.cvv.org.br/\"\r\n      },\r\n      {\r\n        name: \"TouchPeace\",\r\n        description: \"Free emotional support via video call, available 24/7\",\r\n        website: \"https://www.touchpeace.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Canada\",\r\n    countryCode: \"CA\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"911\",\r\n        description: \"National emergency number in Canada\"\r\n      },\r\n      {\r\n        name: \"Suicide Crisis Helpline\",\r\n        phone: \"988\",\r\n        description: \"24/7 suicide crisis helpline in both English and French\",\r\n        website: \"https://www.canada.ca/en/public-health/services/suicide-prevention/warning-signs.html\"\r\n      },\r\n      {\r\n        name: \"Kids Help Phone\",\r\n        phone: \"1-800-668-6868\",\r\n        altPhone: \"Text CONNECT to 686868\",\r\n        description: \"24/7 national support service for youth in English and French\",\r\n        website: \"https://kidshelpphone.ca/\"\r\n      },\r\n      {\r\n        name: \"Talk Suicide Canada\",\r\n        phone: \"1-833-456-4566\",\r\n        altPhone: \"Text 45645\",\r\n        description: \"Nationwide suicide prevention service, 24/7\",\r\n        website: \"https://talksuicide.ca/\"\r\n      },\r\n      {\r\n        name: \"Trans Lifeline\",\r\n        phone: \"1-877-330-6366\",\r\n        description: \"Crisis hotline for transgender people, staffed by transgender individuals\",\r\n        website: \"http://www.translifeline.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"China\",\r\n    countryCode: \"CN\",\r\n    hotlines: [\r\n      {\r\n        name: \"Police Emergency\",\r\n        phone: \"110\",\r\n        description: \"National police emergency number in China\"\r\n      },\r\n      {\r\n        name: \"Ambulance Emergency\",\r\n        phone: \"120\",\r\n        description: \"National ambulance emergency number in China\"\r\n      },\r\n      {\r\n        name: \"Beijing Suicide Research and Prevention Center\",\r\n        phone: \"800-810-1117\",\r\n        altPhone: \"010-8295-1332\",\r\n        description: \"24/7 suicide prevention service\",\r\n        website: \"http://www.crisis.org.cn\"\r\n      },\r\n      {\r\n        name: \"Lifeline China\",\r\n        phone: \"400 821 1215\",\r\n        description: \"Available 10am to 10pm every day\",\r\n        website: \"https://www.lifelinechina.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"France\",\r\n    countryCode: \"FR\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"112\",\r\n        description: \"National emergency number in France\"\r\n      },\r\n      {\r\n        name: \"Suicide Prevention Hotline\",\r\n        phone: \"3114\",\r\n        description: \"National suicide prevention hotline, 24/7\",\r\n        website: \"https://3114.fr/\"\r\n      },\r\n      {\r\n        name: \"SOS Amitié\",\r\n        phone: \"09 72 39 40 50\",\r\n        description: \"Distress listening service on multimedia platform: phone, email, chat\",\r\n        website: \"https://www.sos-amitie.com/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Germany\",\r\n    countryCode: \"DE\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"112\",\r\n        description: \"National emergency number for fire and ambulance in Germany\"\r\n      },\r\n      {\r\n        name: \"Police Emergency\",\r\n        phone: \"110\",\r\n        description: \"National emergency number for police in Germany\"\r\n      },\r\n      {\r\n        name: \"Telefonseelsorge\",\r\n        phone: \"0800 111 0 111\",\r\n        altPhone: \"0800 111 0 222\",\r\n        description: \"24/7 telephone counseling service\",\r\n        website: \"http://www.telefonseelsorge.de/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"India\",\r\n    countryCode: \"IN\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"112\",\r\n        description: \"National emergency number in India\"\r\n      },\r\n      {\r\n        name: \"Kiran Mental Health Helpline\",\r\n        phone: \"1800-599-0019\",\r\n        description: \"24/7 toll-free helpline for suicidal thoughts, depression and mental health issues\"\r\n      },\r\n      {\r\n        name: \"AASRA\",\r\n        phone: \"+91-22-27546669\",\r\n        description: \"24/7 voluntary, professional and confidential services\",\r\n        website: \"http://www.aasra.info/\"\r\n      },\r\n      {\r\n        name: \"Vandrevala Foundation\",\r\n        phone: \"+91 9999666555\",\r\n        description: \"24/7 helpline for psychological counselling and crisis intervention\",\r\n        website: \"http://www.vandrevalafoundation.com\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Ireland\",\r\n    countryCode: \"IE\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"112\",\r\n        altPhone: \"999\",\r\n        description: \"National emergency numbers in Ireland\"\r\n      },\r\n      {\r\n        name: \"Samaritans\",\r\n        phone: \"116 123\",\r\n        description: \"Free emotional support to anyone in distress or at risk of suicide\",\r\n        website: \"http://www.samaritans.org/\"\r\n      },\r\n      {\r\n        name: \"Text Crisis Service\",\r\n        phone: \"Text HELLO to 50808\",\r\n        description: \"Free, confidential 24/7 national crisis-intervention text-message service\",\r\n        website: \"https://text50808.ie/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"Japan\",\r\n    countryCode: \"JP\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"110\",\r\n        altPhone: \"119\",\r\n        description: \"National emergency numbers in Japan\"\r\n      },\r\n      {\r\n        name: \"TELL Lifeline\",\r\n        phone: \"03-5774-0992\",\r\n        description: \"English-language counseling service\",\r\n        website: \"http://telljp.com/lifeline/\"\r\n      },\r\n      {\r\n        name: \"Federation of Inochi No Denwa\",\r\n        phone: \"0120-783-556\",\r\n        description: \"Japanese-language suicide prevention hotline\",\r\n        website: \"https://www.inochinodenwa.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"South Africa\",\r\n    countryCode: \"ZA\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number (Police)\",\r\n        phone: \"10111\",\r\n        description: \"National police emergency number in South Africa\"\r\n      },\r\n      {\r\n        name: \"National Emergency Number (Ambulance)\",\r\n        phone: \"10177\",\r\n        description: \"National ambulance emergency number in South Africa\"\r\n      },\r\n      {\r\n        name: \"Suicide Crisis Line\",\r\n        phone: \"0800 567 567\",\r\n        altPhone: \"SMS 31393\",\r\n        description: \"Crisis support for suicidal individuals\"\r\n      },\r\n      {\r\n        name: \"South African Depression and Anxiety Group\",\r\n        phone: \"0800 456 789\",\r\n        altPhone: \"0800 567 567\",\r\n        description: \"Suicide crisis helpline, 8am-8pm daily\",\r\n        website: \"https://www.sadag.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"United Kingdom\",\r\n    countryCode: \"GB\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"999\",\r\n        altPhone: \"112\",\r\n        description: \"National emergency numbers in the United Kingdom\"\r\n      },\r\n      {\r\n        name: \"Samaritans\",\r\n        phone: \"116 123\",\r\n        description: \"24/7 support for anyone in distress or at risk of suicide\",\r\n        website: \"http://www.samaritans.org/\"\r\n      },\r\n      {\r\n        name: \"CALM (Campaign Against Living Miserably)\",\r\n        phone: \"0800 58 58 58\",\r\n        description: \"Helpline for men, open 5pm-midnight every day\",\r\n        website: \"https://www.thecalmzone.net/\"\r\n      },\r\n      {\r\n        name: \"SHOUT\",\r\n        phone: \"Text SHOUT to 85258\",\r\n        description: \"UK's free 24/7 text service for anyone in crisis\",\r\n        website: \"https://www.giveusashout.org/\"\r\n      },\r\n      {\r\n        name: \"PAPYRUS Prevention of Young Suicide\",\r\n        phone: \"0800 068 4141\",\r\n        altPhone: \"Text 07860039967\",\r\n        description: \"Support for young people struggling with suicidal thoughts\",\r\n        website: \"https://www.papyrus-uk.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"United States\",\r\n    countryCode: \"US\",\r\n    hotlines: [\r\n      {\r\n        name: \"National Emergency Number\",\r\n        phone: \"911\",\r\n        description: \"National emergency number in the United States\"\r\n      },\r\n      {\r\n        name: \"988 Suicide & Crisis Lifeline\",\r\n        phone: \"988\",\r\n        altPhone: \"1-800-273-8255\",\r\n        description: \"24/7 free support for people in suicidal crisis or emotional distress\",\r\n        website: \"https://988lifeline.org/\"\r\n      },\r\n      {\r\n        name: \"Crisis Text Line\",\r\n        phone: \"Text HOME to 741741\",\r\n        description: \"24/7 crisis-intervention text-message service\",\r\n        website: \"https://www.crisistextline.org/\"\r\n      },\r\n      {\r\n        name: \"Veterans Crisis Line\",\r\n        phone: \"988, then Press 1\",\r\n        altPhone: \"1-800-273-8255, Press 1\",\r\n        description: \"Crisis support for military veterans and their families\",\r\n        website: \"https://www.veteranscrisisline.net/\"\r\n      },\r\n      {\r\n        name: \"The Trevor Project\",\r\n        phone: \"1-866-488-7386\",\r\n        altPhone: \"Text START to 678-678\",\r\n        description: \"Crisis support for LGBTQ+ youth\",\r\n        website: \"http://www.thetrevorproject.org/\"\r\n      },\r\n      {\r\n        name: \"Trans Lifeline\",\r\n        phone: \"1-877-565-8860\",\r\n        description: \"Crisis hotline for transgender people, staffed by transgender individuals\",\r\n        website: \"https://www.translifeline.org/\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    country: \"International\",\r\n    countryCode: \"INTL\",\r\n    hotlines: [\r\n      {\r\n        name: \"International Association for Suicide Prevention\",\r\n        description: \"Find crisis centers around the world\",\r\n        website: \"https://www.iasp.info/resources/Crisis_Centres/\"\r\n      },\r\n      {\r\n        name: \"Befrienders Worldwide\",\r\n        description: \"Global network of helplines providing emotional support\",\r\n        website: \"https://www.befrienders.org/\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default crisisHotlines;\r\n\r\n/**\r\n * Find hotlines for a specific country code\r\n * @param {string} countryCode - Two-letter country code\r\n * @returns {Object|null} Country hotlines or null if not found\r\n */\r\nexport const getHotlinesForCountry = (countryCode) => {\r\n  if (!countryCode) return null;\r\n  \r\n  // Normalize country code to uppercase\r\n  const normalizedCode = countryCode.toUpperCase();\r\n  \r\n  // Find matching country\r\n  const country = crisisHotlines.find(c => c.countryCode === normalizedCode);\r\n  \r\n  // Return country data or international as fallback\r\n  return country || crisisHotlines.find(c => c.countryCode === \"INTL\");\r\n};\r\n\r\n/**\r\n * Get all available countries with hotlines\r\n * @returns {Array} List of countries with their codes\r\n */\r\nexport const getAvailableCountries = () => {\r\n  return crisisHotlines.map(country => ({\r\n    name: country.country,\r\n    code: country.countryCode\r\n  }));\r\n};","/**\r\n * Service to fetch and parse crisis hotline data from Wikipedia\r\n */\r\n\r\n// Cache configuration\r\nconst CACHE_KEY = 'wikiHotlinesCache';\r\nconst CACHE_TTL = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\r\n\r\n/**\r\n * Fetches crisis hotlines from Wikipedia and caches them\r\n * @returns {Promise<Array>} Array of country hotline objects\r\n */\r\nexport const fetchWikipediaCrisisHotlines = async (forceRefresh = false) => {\r\n  try {\r\n    // Check if we're offline\r\n    if (!navigator.onLine) {\r\n      const cachedData = localStorage.getItem(CACHE_KEY);\r\n      if (cachedData) {\r\n        const { hotlines, timestamp } = JSON.parse(cachedData);\r\n        console.log('Using cached Wikipedia hotlines (offline)');\r\n        return hotlines;\r\n      }\r\n      throw new Error('Offline and no cached hotlines');\r\n    }\r\n\r\n    // Check cache if not forcing refresh\r\n    if (!forceRefresh) {\r\n      const cachedData = localStorage.getItem(CACHE_KEY);\r\n      if (cachedData) {\r\n        const { hotlines, timestamp } = JSON.parse(cachedData);\r\n        // Use cache if it's not expired\r\n        if (Date.now() - timestamp < CACHE_TTL) {\r\n          console.log('Using cached Wikipedia hotlines');\r\n          return hotlines;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fetch data from Wikipedia\r\n    console.log('Fetching hotlines from Wikipedia...');\r\n    const response = await fetch(\r\n      'https://corsproxy.org/?' + encodeURIComponent('https://en.wikipedia.org/wiki/List_of_suicide_crisis_lines'), \r\n      {\r\n        signal: AbortSignal.timeout(10000) // 10 second timeout\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch from Wikipedia: ${response.status}`);\r\n    }\r\n\r\n    const html = await response.text();\r\n    \r\n    // Parse the HTML\r\n    const hotlines = parseWikipediaHotlines(html);\r\n\r\n    // Cache the results\r\n    localStorage.setItem(CACHE_KEY, JSON.stringify({\r\n      hotlines,\r\n      timestamp: Date.now()\r\n    }));\r\n\r\n    return hotlines;\r\n  } catch (error) {\r\n    console.error('Error fetching Wikipedia crisis hotlines:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Parse Wikipedia HTML to extract crisis hotline data\r\n * @param {string} html - HTML content of the Wikipedia page\r\n * @returns {Array} Array of parsed hotline data\r\n */\r\nconst parseWikipediaHotlines = (html) => {\r\n  // Create a temporary DOM element to parse the HTML\r\n  const parser = new DOMParser();\r\n  const doc = parser.parseFromString(html, 'text/html');\r\n  \r\n  // Find the main table with the hotlines\r\n  const table = doc.querySelector('.wikitable');\r\n  if (!table) {\r\n    throw new Error('Could not find hotlines table on Wikipedia page');\r\n  }\r\n  \r\n  // Extract table rows (skip the header row)\r\n  const rows = Array.from(table.querySelectorAll('tr')).slice(1);\r\n  \r\n  // Parse each row into a country hotline object\r\n  const hotlinesData = rows.map(row => {\r\n    const columns = row.querySelectorAll('td');\r\n    \r\n    // Some rows might be layout elements, skip if not enough columns\r\n    if (columns.length < 2) return null;\r\n    \r\n    // Extract the country name\r\n    const countryColumn = columns[0];\r\n    const country = countryColumn.textContent.trim();\r\n    \r\n    // Try to find country code (this is a simplification)\r\n    const countryCode = getCountryCode(country);\r\n    \r\n    // Extract hotlines (organizations and numbers)\r\n    const hotlines = [];\r\n    for (let i = 1; i < columns.length; i += 2) {\r\n      const orgColumn = columns[i];\r\n      const numberColumn = columns[i+1];\r\n      \r\n      if (!orgColumn || !numberColumn) continue;\r\n      \r\n      const orgLinks = orgColumn.querySelectorAll('a');\r\n      let name = orgColumn.textContent.trim();\r\n      let website = null;\r\n      \r\n      // Try to extract website URL if available\r\n      if (orgLinks && orgLinks.length > 0) {\r\n        const href = orgLinks[0].getAttribute('href');\r\n        if (href && href.startsWith('http')) {\r\n          website = href;\r\n        } else if (href && href.startsWith('/wiki/')) {\r\n          website = `https://en.wikipedia.org${href}`;\r\n        }\r\n      }\r\n      \r\n      // Extract phone number(s)\r\n      const phoneText = numberColumn ? numberColumn.textContent.trim() : '';\r\n      const phones = phoneText\r\n        .split(/[,;\\n]/)\r\n        .map(p => p.trim())\r\n        .filter(p => p.length > 0);\r\n      \r\n      if (phones.length > 0) {\r\n        hotlines.push({\r\n          name,\r\n          phone: phones[0],\r\n          altPhone: phones.length > 1 ? phones[1] : null,\r\n          description: `Crisis support service in ${country}`,\r\n          website\r\n        });\r\n      }\r\n    }\r\n    \r\n    if (hotlines.length === 0) return null;\r\n    \r\n    return {\r\n      country,\r\n      countryCode,\r\n      hotlines\r\n    };\r\n  }).filter(Boolean); // Remove nulls\r\n  \r\n  return hotlinesData;\r\n};\r\n\r\n/**\r\n * Simple mapping of country names to country codes\r\n * @param {string} countryName \r\n * @returns {string} Two-letter country code\r\n */\r\nconst getCountryCode = (countryName) => {\r\n  const countryMap = {\r\n    'Argentina': 'AR',\r\n    'Australia': 'AU',\r\n    'Austria': 'AT',\r\n    'Belgium': 'BE',\r\n    'Brazil': 'BR',\r\n    'Bulgaria': 'BG',\r\n    'Canada': 'CA',\r\n    'China': 'CN',\r\n    'Croatia': 'HR',\r\n    'Cyprus': 'CY',\r\n    'Czech Republic': 'CZ',\r\n    'Denmark': 'DK',\r\n    'Estonia': 'EE',\r\n    'Finland': 'FI',\r\n    'France': 'FR',\r\n    'Germany': 'DE',\r\n    'Greece': 'GR',\r\n    'Hong Kong': 'HK',\r\n    'Hungary': 'HU',\r\n    'Iceland': 'IS',\r\n    'India': 'IN',\r\n    'Iran': 'IR',\r\n    'Ireland': 'IE',\r\n    'Israel': 'IL',\r\n    'Italy': 'IT',\r\n    'Japan': 'JP',\r\n    'Jordan': 'JO',\r\n    'Latvia': 'LV',\r\n    'Lebanon': 'LB',\r\n    'Lithuania': 'LT',\r\n    'Luxembourg': 'LU',\r\n    'Malaysia': 'MY',\r\n    'Malta': 'MT',\r\n    'Mexico': 'MX',\r\n    'Netherlands': 'NL',\r\n    'New Zealand': 'NZ',\r\n    'Norway': 'NO',\r\n    'Philippines': 'PH',\r\n    'Poland': 'PL',\r\n    'Portugal': 'PT',\r\n    'Romania': 'RO',\r\n    'Russia': 'RU',\r\n    'Serbia': 'RS',\r\n    'Singapore': 'SG',\r\n    'Slovakia': 'SK',\r\n    'Slovenia': 'SI',\r\n    'South Africa': 'ZA',\r\n    'South Korea': 'KR',\r\n    'Spain': 'ES',\r\n    'Sri Lanka': 'LK',\r\n    'Sweden': 'SE',\r\n    'Switzerland': 'CH',\r\n    'Taiwan': 'TW',\r\n    'Thailand': 'TH',\r\n    'Trinidad and Tobago': 'TT',\r\n    'Turkey': 'TR',\r\n    'Ukraine': 'UA',\r\n    'United Arab Emirates': 'AE',\r\n    'United Kingdom': 'GB',\r\n    'United States': 'US',\r\n    'Uruguay': 'UY',\r\n    'Venezuela': 'VE',\r\n    'Vietnam': 'VN'\r\n  };\r\n  \r\n  // Try direct mapping first\r\n  if (countryMap[countryName]) {\r\n    return countryMap[countryName];\r\n  }\r\n  \r\n  // Try to find a partial match\r\n  for (const [name, code] of Object.entries(countryMap)) {\r\n    if (countryName.includes(name) || name.includes(countryName)) {\r\n      return code;\r\n    }\r\n  }\r\n  \r\n  // Default to INTL for unknown countries\r\n  return 'INTL';\r\n};\r\n\r\n/**\r\n * Get the last fetch timestamp for Wikipedia data\r\n * @returns {Object} Timestamp and age information\r\n */\r\nexport const getWikiHotlinesCacheInfo = () => {\r\n  const cachedData = localStorage.getItem(CACHE_KEY);\r\n  if (!cachedData) {\r\n    return { \r\n      timestamp: null, \r\n      age: null,\r\n      exists: false \r\n    };\r\n  }\r\n  \r\n  const { timestamp } = JSON.parse(cachedData);\r\n  const now = Date.now();\r\n  const age = now - timestamp;\r\n  const ageInDays = Math.floor(age / (24 * 60 * 60 * 1000));\r\n  \r\n  return {\r\n    timestamp: new Date(timestamp).toLocaleString(),\r\n    age: ageInDays === 0 \r\n      ? 'today' \r\n      : ageInDays === 1 \r\n        ? 'yesterday' \r\n        : `${ageInDays} days ago`,\r\n    exists: true\r\n  };\r\n};","import staticHotlines from '../data/crisisHotlines';\r\nimport { fetchWikipediaCrisisHotlines, getWikiHotlinesCacheInfo } from './wikiHotlineService';\r\n\r\n/**\r\n * Get combined crisis hotlines from Wikipedia and static data\r\n * @param {boolean} forceRefresh - Whether to force refresh Wikipedia data\r\n * @returns {Promise<Array>} Combined hotline data\r\n */\r\nexport const getCombinedHotlines = async (forceRefresh = false) => {\r\n  // Skip trying to fetch from Wikipedia - just use static data\r\n  return { \r\n    hotlines: staticHotlines,\r\n    source: 'static',\r\n    wikiSuccess: false,\r\n    error: \"Using reliable local database only\"\r\n  };\r\n};\r\n\r\n/**\r\n * Get the cache status of Wikipedia hotlines\r\n */\r\nexport const getHotlinesCacheStatus = () => {\r\n  return getWikiHotlinesCacheInfo();\r\n};\r\n\r\n/**\r\n * Find hotlines for a specific country code\r\n * @param {Array} hotlines - Array of hotline data\r\n * @param {string} countryCode - Two-letter country code\r\n * @returns {Object|null} Country hotlines or null if not found\r\n */\r\nexport const getHotlinesForCountry = (hotlines, countryCode) => {\r\n  if (!countryCode || !hotlines || !Array.isArray(hotlines)) return null;\r\n  \r\n  // Normalize country code to uppercase\r\n  const normalizedCode = countryCode.toUpperCase();\r\n  \r\n  // Find matching country\r\n  const country = hotlines.find(c => c.countryCode === normalizedCode);\r\n  \r\n  // Return country data or international as fallback\r\n  return country || hotlines.find(c => c.countryCode === \"INTL\");\r\n};\r\n\r\n/**\r\n * Get all available countries with hotlines\r\n * @param {Array} hotlines - Array of hotline data\r\n * @returns {Array} List of countries with their codes\r\n */\r\nexport const getAvailableCountries = (hotlines) => {\r\n  if (!hotlines || !Array.isArray(hotlines)) return [];\r\n  \r\n  return hotlines.map(country => ({\r\n    name: country.country,\r\n    code: country.countryCode\r\n  }));\r\n};\r\n\r\n/**\r\n * Merge Wikipedia and static hotline data\r\n * @param {Array} wikiHotlines - Hotlines from Wikipedia\r\n * @param {Array} staticHotlines - Our static hotlines\r\n * @returns {Array} Merged hotlines\r\n */\r\nconst mergeCrisisHotlines = (wikiHotlines, staticHotlines) => {\r\n  // Start with a copy of wiki hotlines\r\n  const merged = [...wikiHotlines];\r\n  const wikiCountryCodes = wikiHotlines.map(h => h.countryCode);\r\n  \r\n  // Add static hotlines that aren't in Wikipedia data\r\n  for (const hotline of staticHotlines) {\r\n    if (!wikiCountryCodes.includes(hotline.countryCode)) {\r\n      merged.push(hotline);\r\n    }\r\n  }\r\n  \r\n  // Always include international entry if not present\r\n  if (!merged.find(h => h.countryCode === 'INTL')) {\r\n    merged.push(staticHotlines.find(h => h.countryCode === 'INTL'));\r\n  }\r\n  \r\n  // Sort by country name\r\n  return merged.sort((a, b) => a.country.localeCompare(b.country));\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { getUserCountry } from '../services/geoLocationService';\r\nimport { getCombinedHotlines, getHotlinesForCountry, getAvailableCountries, getHotlinesCacheStatus } from '../services/crisisHotlineService';\r\nimport './CrisisHotlines.css';\r\n\r\nconst CrisisHotlines = () => {\r\n  const [userCountry, setUserCountry] = useState(null);\r\n  const [countryHotlines, setCountryHotlines] = useState(null);\r\n  const [availableCountries, setAvailableCountries] = useState([]);\r\n  const [allHotlines, setAllHotlines] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [dataSource, setDataSource] = useState(null);\r\n  const [cacheInfo, setCacheInfo] = useState(null);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Get the user's country\r\n        const country = await getUserCountry();\r\n        setUserCountry(country);\r\n        \r\n        // Get combined hotlines\r\n        const { hotlines, source, wikiSuccess, error } = await getCombinedHotlines();\r\n        setAllHotlines(hotlines);\r\n        setDataSource({ source, wikiSuccess, error });\r\n        \r\n        // Get cache information\r\n        const cacheStatus = getHotlinesCacheStatus();\r\n        setCacheInfo(cacheStatus);\r\n        \r\n        // Get available countries with hotlines\r\n        const countries = getAvailableCountries(hotlines);\r\n        setAvailableCountries(countries);\r\n        \r\n        // Set the initial selected country to user's country or first in list\r\n        const initialCountry = country?.countryCode || (countries.length > 0 ? countries[0].code : null);\r\n        setSelectedCountry(initialCountry);\r\n        \r\n        // Get hotlines for the country\r\n        if (initialCountry) {\r\n          const countryData = getHotlinesForCountry(hotlines, initialCountry);\r\n          setCountryHotlines(countryData);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching hotline data:\", err);\r\n        setError(\"Could not retrieve crisis hotlines. Please check your connection.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleCountryChange = (e) => {\r\n    const countryCode = e.target.value;\r\n    setSelectedCountry(countryCode);\r\n    const hotlines = getHotlinesForCountry(allHotlines, countryCode);\r\n    setCountryHotlines(hotlines);\r\n  };\r\n\r\n  const handleRefreshData = async () => {\r\n    if (isRefreshing) return;\r\n    \r\n    setIsRefreshing(true);\r\n    try {\r\n      // Force refresh of Wikipedia data\r\n      const { hotlines, source, wikiSuccess, error } = await getCombinedHotlines(true);\r\n      setAllHotlines(hotlines);\r\n      setDataSource({ source, wikiSuccess, error });\r\n      \r\n      // Update cache information\r\n      const cacheStatus = getHotlinesCacheStatus();\r\n      setCacheInfo(cacheStatus);\r\n      \r\n      // Update available countries\r\n      const countries = getAvailableCountries(hotlines);\r\n      setAvailableCountries(countries);\r\n      \r\n      // Update selected country's data\r\n      if (selectedCountry) {\r\n        const countryData = getHotlinesForCountry(hotlines, selectedCountry);\r\n        setCountryHotlines(countryData);\r\n      }\r\n      \r\n      // Show success message\r\n      setError(\"Crisis hotlines updated successfully!\");\r\n      setTimeout(() => setError(null), 3000);\r\n    } catch (err) {\r\n      console.error(\"Error refreshing hotline data:\", err);\r\n      setError(\"Failed to refresh crisis hotlines. Please check your connection.\");\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  const callHotline = (phoneNumber) => {\r\n    if (phoneNumber && !phoneNumber.toLowerCase().startsWith('text')) {\r\n      window.location.href = `tel:${phoneNumber.replace(/\\s+/g, '')}`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"crisis-hotlines\">\r\n      <h2>\r\n        <span className=\"emergency-icon\">🆘</span> \r\n        Emergency Crisis Hotlines\r\n      </h2>\r\n      \r\n      {loading ? (\r\n        <div className=\"hotlines-loading\">\r\n          <div className=\"hotlines-spinner\"></div>\r\n          <p>Finding emergency resources for your location...</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"country-selection\">\r\n            <div className=\"country-selector\">\r\n              <label htmlFor=\"country-select\">\r\n                Select your country:\r\n                {userCountry && userCountry.source === 'api' && (\r\n                  <span className=\"detected-country\"> \r\n                    (Detected: {userCountry.country})\r\n                  </span>\r\n                )}\r\n              </label>\r\n              <select \r\n                id=\"country-select\" \r\n                value={selectedCountry || ''} \r\n                onChange={handleCountryChange}\r\n              >\r\n                {availableCountries.map(country => (\r\n                  <option key={country.code} value={country.code}>\r\n                    {country.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"data-source-info\">\r\n              {dataSource && (\r\n                <div className={`data-source ${dataSource.wikiSuccess ? 'wiki-success' : 'wiki-error'}`}>\r\n                  <span>\r\n                    Source: {dataSource.wikiSuccess ? 'Wikipedia + Local Database' : 'Local Database Only'}\r\n                  </span>\r\n                  {cacheInfo && cacheInfo.exists && (\r\n                    <span className=\"cache-age\">Updated: {cacheInfo.age}</span>\r\n                  )}\r\n                  <button \r\n                    onClick={handleRefreshData} \r\n                    disabled={isRefreshing || !navigator.onLine}\r\n                    className=\"refresh-button\"\r\n                    title=\"Update crisis hotlines from Wikipedia\"\r\n                  >\r\n                    <span className={`refresh-icon ${isRefreshing ? 'spinning' : ''}`}>↻</span>\r\n                    <span className=\"refresh-text\">Update</span>\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {error && (\r\n            <div className={`hotlines-message ${error.includes('successfully') ? 'success' : 'error'}`}>\r\n              <p>{error}</p>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"emergency-notice\">\r\n            <p className=\"emergency-text\">\r\n              <strong>If you are in immediate danger of harming yourself or others,\r\n              please call your local emergency services (such as 911 in the US) immediately.</strong>\r\n            </p>\r\n          </div>\r\n          \r\n          {countryHotlines && (\r\n            <div className=\"hotlines-list\">\r\n              <h3>Crisis Support in {countryHotlines.country}</h3>\r\n              {countryHotlines.hotlines.map((hotline, index) => (\r\n                <div key={index} className=\"hotline-card\">\r\n                  <h4 className=\"hotline-name\">{hotline.name}</h4>\r\n                  \r\n                  {hotline.phone && (\r\n                    <div \r\n                      className={`hotline-phone ${!hotline.phone.toLowerCase().startsWith('text') ? 'clickable' : ''}`}\r\n                      onClick={() => callHotline(hotline.phone)}\r\n                    >\r\n                      <span className=\"phone-icon\">📞</span> {hotline.phone}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hotline.altPhone && (\r\n                    <div \r\n                      className={`hotline-alt-phone ${!hotline.altPhone.toLowerCase().startsWith('text') ? 'clickable' : ''}`}\r\n                      onClick={() => callHotline(hotline.altPhone)}\r\n                    >\r\n                      <span className=\"phone-icon\">📞</span> {hotline.altPhone}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hotline.description && (\r\n                    <div className=\"hotline-description\">\r\n                      {hotline.description}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hotline.website && (\r\n                    <a \r\n                      href={hotline.website} \r\n                      target=\"_blank\" \r\n                      rel=\"noopener noreferrer\"\r\n                      className=\"hotline-website\"\r\n                    >\r\n                      Visit Website <span className=\"external-icon\">↗️</span>\r\n                    </a>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"additional-resources\">\r\n            <h3>Additional Resources</h3>\r\n            <p>\r\n              International Association for Suicide Prevention: \r\n              <a \r\n                href=\"https://www.iasp.info/resources/Crisis_Centres/\" \r\n                target=\"_blank\" \r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Find more crisis centers worldwide\r\n              </a>\r\n            </p>\r\n            <p>\r\n              Wikipedia List of Suicide Crisis Lines: \r\n              <a \r\n                href=\"https://en.wikipedia.org/wiki/List_of_suicide_crisis_lines\" \r\n                target=\"_blank\" \r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                View complete list\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrisisHotlines;","/**\r\n * Service for handling push notifications and reminders\r\n */\r\n\r\nimport { openDB } from 'idb';\r\n\r\nconst DB_NAME = 'MindMattersDB';\r\nconst DB_VERSION = 1;\r\nconst SETTINGS_STORE = 'settings';\r\n\r\n/**\r\n * Check if notifications are supported and permission is granted\r\n * @returns {Promise<boolean>} Whether notifications can be used\r\n */\r\nexport const canUseNotifications = async () => {\r\n  if (!('Notification' in window)) {\r\n    return false;\r\n  }\r\n  \r\n  // If permission is already granted\r\n  if (Notification.permission === 'granted') {\r\n    return true;\r\n  }\r\n  \r\n  // If permission is denied, we can't request again\r\n  if (Notification.permission === 'denied') {\r\n    return false;\r\n  }\r\n  \r\n  // Otherwise, we need to request permission\r\n  try {\r\n    const permission = await Notification.requestPermission();\r\n    return permission === 'granted';\r\n  } catch (error) {\r\n    console.error('Error requesting notification permission:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Request notification permission\r\n * @returns {Promise<string>} The permission status\r\n */\r\nexport const requestNotificationPermission = async () => {\r\n  if (!('Notification' in window)) {\r\n    return 'unsupported';\r\n  }\r\n  \r\n  try {\r\n    return await Notification.requestPermission();\r\n  } catch (error) {\r\n    console.error('Error requesting notification permission:', error);\r\n    return 'error';\r\n  }\r\n};\r\n\r\n/**\r\n * Schedule a daily reminder notification\r\n * @param {number} hour - Hour of day (0-23)\r\n * @param {number} minute - Minute of hour (0-59)\r\n */\r\nexport const scheduleDailyReminder = async (hour = 20, minute = 0) => {\r\n  // Check if we can use notifications\r\n  const canUse = await canUseNotifications();\r\n  if (!canUse) {\r\n    console.warn('Cannot use notifications. Permission denied or not supported.');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Save reminder settings to IndexedDB\r\n    await saveNotificationSettings({\r\n      enabled: true,\r\n      reminderTime: { hour, minute }\r\n    });\r\n    \r\n    // Create a Date object for today at the specified time\r\n    const now = new Date();\r\n    const reminderTime = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate(),\r\n      hour,\r\n      minute,\r\n      0\r\n    );\r\n    \r\n    // If the time has already passed today, set it for tomorrow\r\n    if (reminderTime < now) {\r\n      reminderTime.setDate(reminderTime.getDate() + 1);\r\n    }\r\n    \r\n    // Schedule with service worker if available\r\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\r\n      navigator.serviceWorker.controller.postMessage({\r\n        type: 'SCHEDULE_NOTIFICATION',\r\n        title: 'MindMatters Daily Check-in',\r\n        body: 'How are you feeling today? Take a moment to log your mood.',\r\n        tag: 'daily-reminder',\r\n        timestamp: reminderTime.getTime()\r\n      });\r\n      \r\n      return true;\r\n    } else {\r\n      // Fallback to setTimeout if service worker is not available\r\n      // Note: This won't work if the app is closed\r\n      const delay = reminderTime.getTime() - now.getTime();\r\n      \r\n      setTimeout(() => {\r\n        new Notification('MindMatters Daily Check-in', {\r\n          body: 'How are you feeling today? Take a moment to log your mood.',\r\n          icon: '/icons/icon-192x192.png',\r\n          badge: '/icons/badge-96x96.png',\r\n        });\r\n      }, delay);\r\n      \r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error scheduling notification:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Cancel scheduled daily reminders\r\n */\r\nexport const cancelDailyReminder = async () => {\r\n  try {\r\n    // Save the disabled state to IndexedDB\r\n    await saveNotificationSettings({\r\n      enabled: false\r\n    });\r\n    \r\n    // Notify service worker if available\r\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\r\n      navigator.serviceWorker.controller.postMessage({\r\n        type: 'CANCEL_NOTIFICATIONS',\r\n        tag: 'daily-reminder'\r\n      });\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error cancelling reminders:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if a reminder is currently scheduled\r\n * @returns {Promise<boolean>} Whether a reminder is active\r\n */\r\nexport const isReminderActive = async () => {\r\n  try {\r\n    const settings = await getNotificationSettings();\r\n    return settings && settings.enabled;\r\n  } catch (error) {\r\n    console.error('Error checking reminder state:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the current reminder time\r\n * @returns {Promise<Object|null>} The reminder time { hour, minute } or null\r\n */\r\nexport const getReminderTime = async () => {\r\n  try {\r\n    const settings = await getNotificationSettings();\r\n    return settings && settings.reminderTime ? \r\n      settings.reminderTime : \r\n      { hour: 20, minute: 0 }; // Default: 8:00 PM\r\n  } catch (error) {\r\n    console.error('Error getting reminder time:', error);\r\n    return { hour: 20, minute: 0 };\r\n  }\r\n};\r\n\r\n// Helper functions for working with IndexedDB\r\n\r\n/**\r\n * Save notification settings to IndexedDB\r\n * @param {Object} settings - Notification settings\r\n */\r\nconst saveNotificationSettings = async (settings) => {\r\n  const db = await openDB(DB_NAME, DB_VERSION, {\r\n    upgrade(db) {\r\n      if (!db.objectStoreNames.contains(SETTINGS_STORE)) {\r\n        db.createObjectStore(SETTINGS_STORE, { keyPath: 'id' });\r\n      }\r\n    }\r\n  });\r\n  \r\n  await db.put(SETTINGS_STORE, {\r\n    id: 'notificationSettings',\r\n    value: settings\r\n  });\r\n};\r\n\r\n/**\r\n * Get notification settings from IndexedDB\r\n * @returns {Promise<Object|null>} The notification settings or null\r\n */\r\nconst getNotificationSettings = async () => {\r\n  try {\r\n    const db = await openDB(DB_NAME, DB_VERSION);\r\n    const settings = await db.get(SETTINGS_STORE, 'notificationSettings');\r\n    return settings ? settings.value : null;\r\n  } catch (error) {\r\n    console.error('Error getting notification settings:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Register for background periodic sync (Chrome only)\r\n */\r\nexport const registerPeriodicSync = async () => {\r\n  if ('serviceWorker' in navigator && 'periodicSync' in navigator.serviceWorker) {\r\n    try {\r\n      // Get the service worker registration\r\n      const registration = await navigator.serviceWorker.ready;\r\n      \r\n      // Check if periodic sync is available\r\n      if ('periodicSync' in registration) {\r\n        // Request permission\r\n        const status = await navigator.permissions.query({\r\n          name: 'periodic-background-sync',\r\n        });\r\n        \r\n        if (status.state === 'granted') {\r\n          // Register for daily sync\r\n          await registration.periodicSync.register('daily-reminder', {\r\n            minInterval: 24 * 60 * 60 * 1000, // Once per day\r\n          });\r\n          \r\n          return true;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error registering for periodic sync:', error);\r\n    }\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Send a test notification\r\n */\r\nexport const sendTestNotification = async () => {\r\n  const canUse = await canUseNotifications();\r\n  \r\n  if (!canUse) {\r\n    console.warn('Cannot send test notification. Permission denied or not supported.');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    new Notification('MindMatters Test Notification', {\r\n      body: 'This is a test notification from MindMatters app.',\r\n      icon: '/icons/icon-192x192.png',\r\n      badge: '/icons/badge-96x96.png',\r\n    });\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error sending test notification:', error);\r\n    return false;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { requestNotificationPermission, scheduleDailyReminder, cancelDailyReminder, isReminderActive, getReminderTime, sendTestNotification } from '../services/notificationService';\r\nimport './Settings.css';\r\n\r\nconst Settings = () => {\r\n    const [activeSection, setActiveSection] = useState('notifications');\r\n    const [notificationPermission, setNotificationPermission] = useState('default');\r\n    const [reminderEnabled, setReminderEnabled] = useState(false);\r\n    const [reminderTime, setReminderTime] = useState('20:00');\r\n    const [isInstalledPWA, setIsInstalledPWA] = useState(false);\r\n    const [appVersion, setAppVersion] = useState('1.0.0');\r\n    const [offlineStatus, setOfflineStatus] = useState(navigator.onLine ? 'online' : 'offline');\r\n    const [testNotificationSent, setTestNotificationSent] = useState(false);\r\n    const [storageUsage, setStorageUsage] = useState(null);\r\n\r\n    // Check notification permission and reminder status on mount\r\n    useEffect(() => {\r\n        const checkNotificationState = async () => {\r\n            setNotificationPermission(Notification.permission);\r\n            \r\n            const reminderActive = await isReminderActive();\r\n            setReminderEnabled(reminderActive);\r\n            \r\n            const time = await getReminderTime();\r\n            if (time) {\r\n                setReminderTime(\r\n                    `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}`\r\n                );\r\n            }\r\n        };\r\n        \r\n        if ('Notification' in window) {\r\n            checkNotificationState();\r\n        }\r\n    }, []);\r\n    \r\n    // Check if app is installed as PWA\r\n    useEffect(() => {\r\n        const checkPWAStatus = () => {\r\n            // Check if app is in standalone mode or display-mode is standalone\r\n            const isStandalone = window.matchMedia('(display-mode: standalone)').matches || \r\n                                window.navigator.standalone || \r\n                                document.referrer.includes('android-app://');\r\n                                \r\n            setIsInstalledPWA(isStandalone);\r\n        };\r\n        \r\n        checkPWAStatus();\r\n    }, []);\r\n    \r\n    // Monitor online/offline status\r\n    useEffect(() => {\r\n        const handleOnline = () => setOfflineStatus('online');\r\n        const handleOffline = () => setOfflineStatus('offline');\r\n        \r\n        window.addEventListener('online', handleOnline);\r\n        window.addEventListener('offline', handleOffline);\r\n        \r\n        return () => {\r\n            window.removeEventListener('online', handleOnline);\r\n            window.removeEventListener('offline', handleOffline);\r\n        };\r\n    }, []);\r\n    \r\n    // Calculate storage usage\r\n    useEffect(() => {\r\n        const calculateStorageUsage = async () => {\r\n            if ('storage' in navigator && 'estimate' in navigator.storage) {\r\n                try {\r\n                    const estimate = await navigator.storage.estimate();\r\n                    const usedMB = Math.round(estimate.usage / (1024 * 1024) * 10) / 10;\r\n                    const quotaMB = Math.round(estimate.quota / (1024 * 1024) * 10) / 10;\r\n                    const percentUsed = Math.round((estimate.usage / estimate.quota) * 100);\r\n                    \r\n                    setStorageUsage({\r\n                        used: usedMB,\r\n                        quota: quotaMB,\r\n                        percent: percentUsed\r\n                    });\r\n                } catch (error) {\r\n                    console.error('Error calculating storage usage:', error);\r\n                }\r\n            }\r\n        };\r\n        \r\n        calculateStorageUsage();\r\n    }, []);\r\n\r\n    // Request notification permission\r\n    const handleRequestPermission = async () => {\r\n        const permission = await requestNotificationPermission();\r\n        setNotificationPermission(permission);\r\n    };\r\n\r\n    // Toggle daily reminder\r\n    const handleToggleReminder = async () => {\r\n        try {\r\n            if (reminderEnabled) {\r\n                await cancelDailyReminder();\r\n                setReminderEnabled(false);\r\n            } else {\r\n                const [hour, minute] = reminderTime.split(':').map(Number);\r\n                const success = await scheduleDailyReminder(hour, minute);\r\n                setReminderEnabled(success);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error toggling reminder:', error);\r\n        }\r\n    };\r\n\r\n    // Update reminder time\r\n    const handleTimeChange = async (e) => {\r\n        const newTime = e.target.value;\r\n        setReminderTime(newTime);\r\n        \r\n        if (reminderEnabled) {\r\n            const [hour, minute] = newTime.split(':').map(Number);\r\n            await scheduleDailyReminder(hour, minute);\r\n        }\r\n    };\r\n    \r\n    // Send test notification\r\n    const handleTestNotification = async () => {\r\n        const success = await sendTestNotification();\r\n        setTestNotificationSent(success);\r\n        \r\n        if (success) {\r\n            setTimeout(() => setTestNotificationSent(false), 3000);\r\n        }\r\n    };\r\n    \r\n    // Handle app installation\r\n    const handleInstallClick = () => {\r\n        if (window.deferredPrompt) {\r\n            window.deferredPrompt.prompt();\r\n            window.deferredPrompt.userChoice.then((choiceResult) => {\r\n                if (choiceResult.outcome === 'accepted') {\r\n                    console.log('User accepted the install prompt');\r\n                    setIsInstalledPWA(true);\r\n                } else {\r\n                    console.log('User dismissed the install prompt');\r\n                }\r\n                window.deferredPrompt = null;\r\n            });\r\n        }\r\n    };\r\n    \r\n    // Clear app data\r\n    const handleClearData = async () => {\r\n        if (window.confirm('Are you sure? This will delete all your journal entries and settings.')) {\r\n            try {\r\n                // Clear IndexedDB\r\n                const databases = await window.indexedDB.databases();\r\n                databases.forEach(db => {\r\n                    window.indexedDB.deleteDatabase(db.name);\r\n                });\r\n                \r\n                // Clear localStorage\r\n                localStorage.clear();\r\n                \r\n                // Clear caches\r\n                if ('caches' in window) {\r\n                    const keys = await caches.keys();\r\n                    await Promise.all(keys.map(key => caches.delete(key)));\r\n                }\r\n                \r\n                // Reload the app\r\n                window.location.reload();\r\n            } catch (error) {\r\n                console.error('Error clearing app data:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"settings\">\r\n            <h2>\r\n                <span className=\"settings-icon\">⚙️</span>\r\n                Settings\r\n            </h2>\r\n            \r\n            <div className=\"settings-container\">\r\n                <div className=\"settings-sidebar\">\r\n                    <button \r\n                        className={`settings-nav-btn ${activeSection === 'notifications' ? 'active' : ''}`}\r\n                        onClick={() => setActiveSection('notifications')}\r\n                    >\r\n                        <span className=\"settings-nav-icon\">🔔</span>\r\n                        Notifications\r\n                    </button>\r\n                    <button \r\n                        className={`settings-nav-btn ${activeSection === 'app' ? 'active' : ''}`}\r\n                        onClick={() => setActiveSection('app')}\r\n                    >\r\n                        <span className=\"settings-nav-icon\">📱</span>\r\n                        App Installation\r\n                    </button>\r\n                    <button \r\n                        className={`settings-nav-btn ${activeSection === 'data' ? 'active' : ''}`}\r\n                        onClick={() => setActiveSection('data')}\r\n                    >\r\n                        <span className=\"settings-nav-icon\">💾</span>\r\n                        Data Management\r\n                    </button>\r\n                    <button \r\n                        className={`settings-nav-btn ${activeSection === 'about' ? 'active' : ''}`}\r\n                        onClick={() => setActiveSection('about')}\r\n                    >\r\n                        <span className=\"settings-nav-icon\">ℹ️</span>\r\n                        About\r\n                    </button>\r\n                </div>\r\n                \r\n                <div className=\"settings-content\">\r\n                    {activeSection === 'notifications' && (\r\n                        <div className=\"settings-section\">\r\n                            <h3>Notification Settings</h3>\r\n                            <p>Configure reminders to help you maintain a consistent journaling habit.</p>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <h4>Push Notifications</h4>\r\n                                {!('Notification' in window) ? (\r\n                                    <p className=\"settings-warning\">\r\n                                        Your browser doesn't support push notifications.\r\n                                    </p>\r\n                                ) : notificationPermission === 'denied' ? (\r\n                                    <p className=\"settings-warning\">\r\n                                        Notification permission was denied. Please update your browser settings to enable notifications.\r\n                                    </p>\r\n                                ) : notificationPermission !== 'granted' ? (\r\n                                    <div>\r\n                                        <p>Allow MindMatters to send you helpful reminders.</p>\r\n                                        <button \r\n                                            onClick={handleRequestPermission} \r\n                                            className=\"settings-btn\"\r\n                                        >\r\n                                            Enable Notifications\r\n                                        </button>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div>\r\n                                        <p>Notification permission granted. You can now receive reminders.</p>\r\n                                        <button \r\n                                            onClick={handleTestNotification} \r\n                                            className=\"settings-btn\"\r\n                                            disabled={testNotificationSent}\r\n                                        >\r\n                                            {testNotificationSent ? 'Notification Sent!' : 'Send Test Notification'}\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <h4>Daily Journal Reminder</h4>\r\n                                <div className=\"toggle-setting\">\r\n                                    <label className=\"toggle-label\">\r\n                                        Enable daily reminder\r\n                                        <div className=\"toggle-switch\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={reminderEnabled}\r\n                                                onChange={handleToggleReminder}\r\n                                                disabled={notificationPermission !== 'granted'}\r\n                                            />\r\n                                            <span className=\"toggle-slider\"></span>\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                                \r\n                                <div className=\"time-setting\">\r\n                                    <label htmlFor=\"reminderTime\">Reminder Time:</label>\r\n                                    <input\r\n                                        type=\"time\"\r\n                                        id=\"reminderTime\"\r\n                                        value={reminderTime}\r\n                                        onChange={handleTimeChange}\r\n                                        disabled={!reminderEnabled || notificationPermission !== 'granted'}\r\n                                    />\r\n                                    <p className=\"time-note\">We'll send you a reminder to journal at this time each day.</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    \r\n                    {activeSection === 'app' && (\r\n                        <div className=\"settings-section\">\r\n                            <h3>App Installation</h3>\r\n                            <p>Install MindMatters on your device for a better experience and offline access.</p>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <h4>Install as App</h4>\r\n                                {isInstalledPWA ? (\r\n                                    <p>MindMatters is already installed on your device.</p>\r\n                                ) : (\r\n                                    <>\r\n                                        <p>\r\n                                            Install MindMatters on your home screen for quick access and a full-screen experience,\r\n                                            even when offline.\r\n                                        </p>\r\n                                        <button \r\n                                            onClick={handleInstallClick} \r\n                                            className=\"install-button\"\r\n                                            disabled={!window.deferredPrompt}\r\n                                        >\r\n                                            Install MindMatters\r\n                                        </button>\r\n                                        {!window.deferredPrompt && (\r\n                                            <div className=\"install-note\">\r\n                                                <p>\r\n                                                    To install manually:\r\n                                                    {navigator.userAgent.includes('Chrome') && (\r\n                                                        <span> Click the menu (⋮) then \"Install App\"</span>\r\n                                                    )}\r\n                                                    {navigator.userAgent.includes('Firefox') && (\r\n                                                        <span> Click the menu (≡) then \"Install app\"</span>\r\n                                                    )}\r\n                                                    {navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome') && (\r\n                                                        <span> Click the share button then \"Add to Home Screen\"</span>\r\n                                                    )}\r\n                                                </p>\r\n                                            </div>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <h4>Offline Capability</h4>\r\n                                <div className=\"status-items\">\r\n                                    <div className=\"status-item\">\r\n                                        <span className=\"status-label\">Current Status:</span>\r\n                                        <span className={`status-value ${offlineStatus}`}>\r\n                                            {offlineStatus === 'online' ? 'Connected' : 'Offline'}\r\n                                        </span>\r\n                                    </div>\r\n                                    <p className=\"status-info\">\r\n                                        MindMatters works even when you're offline. Your data will be stored locally\r\n                                        and synced when you reconnect.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    \r\n                    {activeSection === 'data' && (\r\n                        <div className=\"settings-section\">\r\n                            <h3>Data Management</h3>\r\n                            <p>Manage your journal data and app storage.</p>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <h4>Storage Usage</h4>\r\n                                {storageUsage ? (\r\n                                    <div className=\"storage-usage\">\r\n                                        <div className=\"usage-bar-container\">\r\n                                            <div \r\n                                                className=\"usage-bar\" \r\n                                                style={{ width: `${storageUsage.percent}%` }}\r\n                                            ></div>\r\n                                        </div>\r\n                                        <p className=\"usage-text\">\r\n                                            Using {storageUsage.used} MB of {storageUsage.quota} MB ({storageUsage.percent}%)\r\n                                        </p>\r\n                                    </div>\r\n                                ) : (\r\n                                    <p>Storage information not available in this browser.</p>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <h4>Data Actions</h4>\r\n                                <div className=\"data-actions\">\r\n                                    {/* This section could include import/export features in the future */}\r\n                                    <button \r\n                                        onClick={handleClearData} \r\n                                        className=\"danger-button\"\r\n                                    >\r\n                                        Clear All App Data\r\n                                    </button>\r\n                                    <p className=\"warning-text\">\r\n                                        This will delete all your journal entries, mood tracking data, and app settings.\r\n                                        This action cannot be undone.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    \r\n                    {activeSection === 'about' && (\r\n                        <div className=\"settings-section\">\r\n                            <h3>About MindMatters</h3>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <div className=\"app-info\">\r\n                                    <img \r\n                                        src=\"/icons/icon-192x192.png\" \r\n                                        alt=\"MindMatters Logo\" \r\n                                        className=\"app-logo\" \r\n                                    />\r\n                                    <div>\r\n                                        <h4>MindMatters</h4>\r\n                                        <p>Version {appVersion}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <p className=\"app-description\">\r\n                                    MindMatters is an offline-first mental health journal designed to help you track\r\n                                    your mood, thoughts, and emotions.\r\n                                </p>\r\n                            </div>\r\n                            \r\n                            <div className=\"settings-subsection\">\r\n                                <h4>App Status</h4>\r\n                                <div className=\"status-items\">\r\n                                    <div className=\"status-item\">\r\n                                        <span className=\"status-label\">Service Worker:</span>\r\n                                        <span className=\"status-value\">\r\n                                            {'serviceWorker' in navigator ? 'Supported' : 'Not Supported'}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"status-item\">\r\n                                        <span className=\"status-label\">Installed as PWA:</span>\r\n                                        <span className=\"status-value\">\r\n                                            {isInstalledPWA ? 'Yes' : 'No'}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"status-item\">\r\n                                        <span className=\"status-label\">Notifications:</span>\r\n                                        <span className=\"status-value\">\r\n                                            {'Notification' in window ? \r\n                                                (notificationPermission === 'granted' ? 'Enabled' : 'Disabled') :\r\n                                                'Not Supported'\r\n                                            }\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"status-item\">\r\n                                        <span className=\"status-label\">Connection:</span>\r\n                                        <span className={`status-value ${offlineStatus}`}>\r\n                                            {offlineStatus === 'online' ? 'Online' : 'Offline'}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"credits\">\r\n                                <p>© 2025 MindMatters - Created with ❤️ for mental wellbeing</p>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useLocation, Link } from 'react-router-dom';\r\nimport JournalEntry from './JournalEntry';\r\nimport JournalLog from './JournalLog';\r\nimport MoodTracker from './MoodTracker';\r\nimport BreathingExercises from './BreathingExercises';\r\nimport EmergencyContacts from './EmergencyContacts';\r\nimport SOSButton from './SOSButton';\r\nimport DailyQuote from './DailyQuote';\r\nimport WeatherMood from './WeatherMood';\r\nimport CrisisHotlines from './CrisisHotlines';\r\nimport Settings from './Settings';\r\nimport { useTheme } from './ThemeManager';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = ({ defaultTab }) => {\r\n    const [activeTab, setActiveTab] = useState(defaultTab || 'journal');\r\n    const [mobileNavOpen, setMobileNavOpen] = useState(false);\r\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { currentMood } = useTheme();\r\n    \r\n    // Update active tab when route changes\r\n    useEffect(() => {\r\n        const path = location.pathname;\r\n        if (path === '/journal') setActiveTab('journal');\r\n        else if (path === '/history') setActiveTab('history');\r\n        else if (path === '/mood-tracker') setActiveTab('mood');\r\n        else if (path === '/breathing') setActiveTab('breathing');\r\n        else if (path === '/weather-mood') setActiveTab('weather');\r\n        else if (path === '/daily-quote') setActiveTab('quote');\r\n        else if (path === '/crisis-hotlines') setActiveTab('hotlines');\r\n        else if (path === '/emergency-contacts') setActiveTab('contacts');\r\n        else if (path === '/settings') setActiveTab('settings');\r\n    }, [location]);\r\n    \r\n    // Monitor online/offline status\r\n    useEffect(() => {\r\n        const handleOnline = () => setIsOnline(true);\r\n        const handleOffline = () => setIsOnline(false);\r\n        \r\n        window.addEventListener('online', handleOnline);\r\n        window.addEventListener('offline', handleOffline);\r\n        \r\n        return () => {\r\n            window.removeEventListener('online', handleOnline);\r\n            window.removeEventListener('offline', handleOffline);\r\n        };\r\n    }, []);\r\n    \r\n    // Get mood class for conditional styling\r\n    const getMoodClass = () => {\r\n        return currentMood ? `mood-${currentMood}` : '';\r\n    };\r\n\r\n    // Toggle mobile navigation\r\n    const toggleMobileNav = () => {\r\n        setMobileNavOpen(!mobileNavOpen);\r\n    };\r\n    \r\n    // Navigation items with icons and categories\r\n    const navItems = [\r\n        {\r\n            category: \"Journal\",\r\n            items: [\r\n                { id: 'journal', path: '/journal', label: 'New Entry', icon: '📝' },\r\n                { id: 'history', path: '/history', label: 'Journal History', icon: '📚' }\r\n            ]\r\n        },\r\n        {\r\n            category: \"Mood\",\r\n            items: [\r\n                { id: 'mood', path: '/mood-tracker', label: 'Mood Tracker', icon: '📊' },\r\n                { id: 'weather', path: '/weather-mood', label: 'Weather & Mood', icon: '🌤️' }\r\n            ]\r\n        },\r\n        {\r\n            category: \"Wellness\",\r\n            items: [\r\n                { id: 'breathing', path: '/breathing', label: 'Breathing', icon: '🧘' },\r\n                { id: 'quote', path: '/daily-quote', label: 'Daily Quote', icon: '💭' }\r\n            ]\r\n        },\r\n        {\r\n            category: \"Emergency\",\r\n            items: [\r\n                { id: 'hotlines', path: '/crisis-hotlines', label: 'Crisis Hotlines', icon: '🆘' },\r\n                { id: 'contacts', path: '/emergency-contacts', label: 'Emergency Contacts', icon: '👥' }\r\n            ]\r\n        }\r\n    ];\r\n    \r\n    return (\r\n        <div className={`dashboard ${getMoodClass()}`}>\r\n            <header className=\"dashboard-header\">\r\n                <div className=\"header-content\">\r\n                    <h1>MindMatters</h1>\r\n                    <p>Your personal mental wellness companion</p>\r\n                </div>\r\n                \r\n                <button \r\n                    className=\"mobile-nav-toggle\"\r\n                    onClick={toggleMobileNav}\r\n                    aria-label=\"Toggle navigation menu\"\r\n                >\r\n                    <span className={`hamburger ${mobileNavOpen ? 'active' : ''}`}></span>\r\n                </button>\r\n                \r\n                <div className=\"header-actions\">\r\n                    {!isOnline && (\r\n                        <div className=\"offline-indicator\" title=\"App is in offline mode\">\r\n                            Offline\r\n                        </div>\r\n                    )}\r\n                    \r\n                    <Link \r\n                        to=\"/settings\"\r\n                        className={`settings-link ${activeTab === 'settings' ? 'active' : ''}`}\r\n                        aria-label=\"Settings\"\r\n                    >\r\n                        <span className=\"settings-icon\">⚙️</span>\r\n                    </Link>\r\n                    \r\n                    <SOSButton className=\"header-sos\" />\r\n                </div>\r\n            </header>\r\n            \r\n            <div className={`nav-container ${mobileNavOpen ? 'mobile-open' : ''}`}>\r\n                <nav className=\"dashboard-nav\">\r\n                    {navItems.map(category => (\r\n                        <div key={category.category} className=\"nav-category\">\r\n                            <h3 className=\"category-heading\">{category.category}</h3>\r\n                            <div className=\"nav-items\">\r\n                                {category.items.map(item => (\r\n                                    <Link\r\n                                        key={item.id}\r\n                                        to={item.path}\r\n                                        className={`nav-button ${activeTab === item.id ? 'active' : ''}`}\r\n                                        onClick={() => setMobileNavOpen(false)}\r\n                                    >\r\n                                        <span className=\"nav-icon\">{item.icon}</span>\r\n                                        <span className=\"nav-label\">{item.label}</span>\r\n                                    </Link>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </nav>\r\n            </div>\r\n            \r\n            <main className=\"dashboard-content\">\r\n                {activeTab === 'journal' && <JournalEntry />}\r\n                {activeTab === 'history' && <JournalLog />}\r\n                {activeTab === 'mood' && <MoodTracker />}\r\n                {activeTab === 'breathing' && <BreathingExercises />}\r\n                {activeTab === 'weather' && <WeatherMood />}\r\n                {activeTab === 'quote' && <DailyQuote />}\r\n                {activeTab === 'hotlines' && <CrisisHotlines />}\r\n                {activeTab === 'contacts' && <EmergencyContacts />}\r\n                {activeTab === 'settings' && <Settings />}\r\n                \r\n                {/* Show the quote on the journal page as well for daily inspiration */}\r\n                {activeTab === 'journal' && <DailyQuote />}\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Dashboard from './components/Dashboard';\r\nimport Settings from './components/Settings'; // Add this import\r\nimport { ThemeProvider } from './components/ThemeManager';\r\nimport './styles/main.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route path=\"/journal\" exact>\r\n              <Dashboard defaultTab=\"journal\" />\r\n            </Route>\r\n            <Route path=\"/history\" exact>\r\n              <Dashboard defaultTab=\"history\" />\r\n            </Route>\r\n            <Route path=\"/mood-tracker\" exact>\r\n              <Dashboard defaultTab=\"mood\" />\r\n            </Route>\r\n            <Route path=\"/breathing\" exact>\r\n              <Dashboard defaultTab=\"breathing\" />\r\n            </Route>\r\n            <Route path=\"/weather-mood\" exact>\r\n              <Dashboard defaultTab=\"weather\" />\r\n            </Route>\r\n            <Route path=\"/daily-quote\" exact>\r\n              <Dashboard defaultTab=\"quote\" />\r\n            </Route>\r\n            <Route path=\"/crisis-hotlines\" exact>\r\n              <Dashboard defaultTab=\"hotlines\" />\r\n            </Route>\r\n            <Route path=\"/emergency-contacts\" exact>\r\n              <Dashboard defaultTab=\"contacts\" />\r\n            </Route>\r\n            <Route path=\"/settings\" exact>\r\n              <Dashboard defaultTab=\"settings\" />\r\n            </Route>\r\n            <Route path=\"/\" exact>\r\n              <Redirect to=\"/journal\" />\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <Redirect to=\"/journal\" />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\n// Fix service worker registration\r\nif ('serviceWorker' in navigator) {\r\n  window.addEventListener('load', () => {\r\n    // Get the GitHub Pages base path\r\n    const isGitHubPages = window.location.hostname.includes('github.io');\r\n    const basePath = isGitHubPages ? '/mindmatters-app' : '';\r\n    \r\n    // Register only one service worker with the correct path\r\n    const swUrl = `${basePath}/service-worker.js`;\r\n    \r\n    console.log('Registering service worker at:', swUrl);\r\n    navigator.serviceWorker.register(swUrl)\r\n      .then(registration => {\r\n        console.log('ServiceWorker registered with scope:', registration.scope);\r\n      })\r\n      .catch(error => {\r\n        console.error('ServiceWorker registration failed:', error);\r\n        // App continues to function even without the service worker\r\n      });\r\n  });\r\n}\r\n\r\n// This will hold the deferred prompt for installation\r\nwindow.deferredPrompt = null;\r\n\r\n// Listen for the beforeinstallprompt event\r\nwindow.addEventListener('beforeinstallprompt', (e) => {\r\n  // Prevent Chrome 67+ from automatically showing the prompt\r\n  e.preventDefault();\r\n  \r\n  // Stash the event so it can be triggered later\r\n  window.deferredPrompt = e;\r\n  \r\n  console.log('App can be installed');\r\n});\r\n\r\n// Listen for app installed event\r\nwindow.addEventListener('appinstalled', () => {\r\n  // Clear the deferredPrompt so it can't be used again\r\n  window.deferredPrompt = null;\r\n  console.log('PWA installed successfully');\r\n});\r\n\r\n// Handle offline status initially\r\nif (!navigator.onLine) {\r\n  document.body.classList.add('offline-mode');\r\n}\r\n\r\n// Listen for online/offline events\r\nwindow.addEventListener('online', () => document.body.classList.remove('offline-mode'));\r\nwindow.addEventListener('offline', () => document.body.classList.add('offline-mode'));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}